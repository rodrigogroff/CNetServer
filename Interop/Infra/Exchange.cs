// ###################################################### 
// ## SyCraf Engine Codegen                          #### 
// ###################################################### 
// ## This file is entirely written by               #### 
// ## the construction bot. DO NOT EDIT THIS FILE.   #### 
// ###################################################### 

using System;
using System.Drawing;
using System.Threading;
using System.Collections;
using System.Windows.Forms;
using SyCrafEngine;

namespace Client
{
	public class Exchange : ClientExchange
	{
		public bool type_base ( ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_TYPE_BASE.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.type_base );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_cartaoProprietario ( string st_csv_deps, ref DadosCartao dc, ref DadosProprietario dp, ref DadosAdicionais da, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_INS_CARTAOPROPRIETARIO.st_csv_deps, st_csv_deps );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				DataPortable send_dp_cont_2 = new DataPortable();
				DataPortable send_dp_cont_3 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_CARTAOPROPRIETARIO.dc, dc as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_INS_CARTAOPROPRIETARIO.dp, dp as DataPortable );
				send_dp_cont_2.MapTagContainer ( COMM_IN_INS_CARTAOPROPRIETARIO.da, da as DataPortable );
				send_dp_cont_3.MapTagContainer ( COMM_IN_INS_CARTAOPROPRIETARIO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_2 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_3 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_cartaoProprietario );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_proprietario ( string st_cpf, ref CNetHeader header, ref DadosProprietario dp ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_PROPRIETARIO.st_cpf, st_cpf );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_PROPRIETARIO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_proprietario );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_cont_dp = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (0).GetMapContainer ( COMM_OUT_FETCH_PROPRIETARIO.dp , ref recv_dp_cont_dp );
				
				dp.Import ( recv_dp_cont_dp );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_login ( string st_nome, string st_empresa, string st_senha, ref string tg_trocaSenha, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_LOGIN.st_nome, st_nome );
				send_dp.MapTagValue ( COMM_IN_EXEC_LOGIN.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_EXEC_LOGIN.st_senha, st_senha );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_login );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_LOGIN.tg_trocaSenha , ref tg_trocaSenha );
				
				DataPortable recv_dp_cont_header = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (1).GetMapContainer ( COMM_OUT_EXEC_LOGIN.header , ref recv_dp_cont_header );
				
				header.Import ( recv_dp_cont_header );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_logoff ( ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_LOGOFF.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_logoff );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_trocaSenha ( string senha, string nova_senha, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_TROCASENHA.senha, senha );
				send_dp.MapTagValue ( COMM_IN_EXEC_TROCASENHA.nova_senha, nova_senha );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_TROCASENHA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_trocaSenha );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_usuario ( string st_nome, string st_senha, string tg_trocaSenha, string st_nivel, string st_empresa, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_INS_USUARIO.st_nome, st_nome );
				send_dp.MapTagValue ( COMM_IN_INS_USUARIO.st_senha, st_senha );
				send_dp.MapTagValue ( COMM_IN_INS_USUARIO.tg_trocaSenha, tg_trocaSenha );
				send_dp.MapTagValue ( COMM_IN_INS_USUARIO.st_nivel, st_nivel );
				send_dp.MapTagValue ( COMM_IN_INS_USUARIO.st_empresa, st_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_USUARIO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_usuario );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_listaUsuarios ( ref CNetHeader header, ref string st_csv_id ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_LISTAUSUARIOS.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_listaUsuarios );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_LISTAUSUARIOS.st_csv_id , ref st_csv_id );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_usuarios ( string st_csv_list, ref CNetHeader header, ref ArrayList usuarios ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_USUARIOS.st_csv_list, st_csv_list );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_USUARIOS.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_usuarios );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_usuarios = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_usuarios.GetMapArray ( COMM_OUT_FETCH_USUARIOS.usuarios , ref usuarios );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_alteraUsuario ( string tg_action, string id_usuario, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERAUSUARIO.tg_action, tg_action );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERAUSUARIO.id_usuario, id_usuario );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_ALTERAUSUARIO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_alteraUsuario );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_empresa ( ref DadosEmpresa de, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_EMPRESA.de, de as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_INS_EMPRESA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_empresa );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_loja ( string st_csv_empresas, string st_csv_taxas, string st_csv_dias, ref DadosLoja dl, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_INS_LOJA.st_csv_empresas, st_csv_empresas );
				send_dp.MapTagValue ( COMM_IN_INS_LOJA.st_csv_taxas, st_csv_taxas );
				send_dp.MapTagValue ( COMM_IN_INS_LOJA.st_csv_dias, st_csv_dias );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_LOJA.dl, dl as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_INS_LOJA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_loja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_dadosEmpresa ( string st_empresa, ref CNetHeader header, ref DadosEmpresa de ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSEMPRESA.st_empresa, st_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_DADOSEMPRESA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_dadosEmpresa );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_cont_de = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (0).GetMapContainer ( COMM_OUT_FETCH_DADOSEMPRESA.de , ref recv_dp_cont_de );
				
				de.Import ( recv_dp_cont_de );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_dadosLoja ( string st_cnpj, string st_cod, ref CNetHeader header, ref DadosLoja dl ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSLOJA.st_cnpj, st_cnpj );
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSLOJA.st_cod, st_cod );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_DADOSLOJA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_dadosLoja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_cont_dl = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (0).GetMapContainer ( COMM_OUT_FETCH_DADOSLOJA.dl , ref recv_dp_cont_dl );
				
				dl.Import ( recv_dp_cont_dl );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_alteraEmpresa ( ref DadosEmpresa de, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_ALTERAEMPRESA.de, de as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_EXEC_ALTERAEMPRESA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_alteraEmpresa );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_alteraLoja ( string st_csv_empresas, string st_csv_taxas, string st_csv_dias, string st_csv_banco, string st_csv_ag, string st_csv_conta, ref DadosLoja dl, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERALOJA.st_csv_empresas, st_csv_empresas );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERALOJA.st_csv_taxas, st_csv_taxas );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERALOJA.st_csv_dias, st_csv_dias );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERALOJA.st_csv_banco, st_csv_banco );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERALOJA.st_csv_ag, st_csv_ag );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERALOJA.st_csv_conta, st_csv_conta );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_ALTERALOJA.dl, dl as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_EXEC_ALTERALOJA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_alteraLoja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_codTerminal ( ref CNetHeader header, ref string st_terminal ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CODTERMINAL.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_codTerminal );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CODTERMINAL.st_terminal , ref st_terminal );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_nomeEmpresa ( string st_nome, ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_NOMEEMPRESA.st_nome, st_nome );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_NOMEEMPRESA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_nomeEmpresa );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_NOMEEMPRESA.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_validaEmpresa ( string st_empresa, ref CNetHeader header, ref string st_nome ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_VALIDAEMPRESA.st_empresa, st_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_VALIDAEMPRESA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_validaEmpresa );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_VALIDAEMPRESA.st_nome , ref st_nome );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_terminal ( string st_loja_cnpj, ref DadosTerminal dt, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_INS_TERMINAL.st_loja_cnpj, st_loja_cnpj );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_TERMINAL.dt, dt as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_INS_TERMINAL.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_terminal );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_terminais ( string st_csvId, ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_TERMINAIS.st_csvId, st_csvId );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_TERMINAIS.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_terminais );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_TERMINAIS.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_terminalLoja ( string st_cnpj_loja, ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_TERMINALLOJA.st_cnpj_loja, st_cnpj_loja );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_TERMINALLOJA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_terminalLoja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_TERMINALLOJA.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool del_Terminal ( string st_loja_cnpj, string st_terminal, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_DEL_TERMINAL.st_loja_cnpj, st_loja_cnpj );
				send_dp.MapTagValue ( COMM_IN_DEL_TERMINAL.st_terminal, st_terminal );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_DEL_TERMINAL.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.del_Terminal );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_consultaLoja ( ref DadosConsultaLoja dcl, ref CNetHeader header, ref string st_csv_id ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CONSULTALOJA.dcl, dcl as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_FETCH_CONSULTALOJA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_consultaLoja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONSULTALOJA.st_csv_id , ref st_csv_id );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_consultaEmpresa ( ref DadosConsultaEmpresa dce, ref CNetHeader header, ref string st_csv_empresas ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CONSULTAEMPRESA.dce, dce as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_FETCH_CONSULTAEMPRESA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_consultaEmpresa );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONSULTAEMPRESA.st_csv_empresas , ref st_csv_empresas );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_consultaAuditoria ( ref DadosConsultaAuditoria dca, ref CNetHeader header, ref string st_csv_audit ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CONSULTAAUDITORIA.dca, dca as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_FETCH_CONSULTAAUDITORIA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_consultaAuditoria );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONSULTAAUDITORIA.st_csv_audit , ref st_csv_audit );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_alteraTerminal ( string st_terminal, string st_localizacao, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERATERMINAL.st_terminal, st_terminal );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERATERMINAL.st_localizacao, st_localizacao );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_ALTERATERMINAL.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_alteraTerminal );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_limitesCartao ( string st_cpf, ref CNetHeader header, ref string st_csv_cartoes ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_LIMITESCARTAO.st_cpf, st_cpf );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_LIMITESCARTAO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_limitesCartao );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_LIMITESCARTAO.st_csv_cartoes , ref st_csv_cartoes );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_alteraCartao ( ref DadosCartao dc, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_ALTERACARTAO.dc, dc as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_EXEC_ALTERACARTAO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_alteraCartao );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_consultaCartao ( ref DadosConsultaCartoes dcc, ref CNetHeader header, ref string st_csv_cartao ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CONSULTACARTAO.dcc, dcc as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_FETCH_CONSULTACARTAO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_consultaCartao );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONSULTACARTAO.st_csv_cartao , ref st_csv_cartao );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool infra_SchedulerDispatcher (  ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.infra_SchedulerDispatcher );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool schedule_base (  ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.schedule_base );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pos_vendaEmpresarial ( ref POS_Entrada pe, ref string st_msg, ref POS_Resposta pr ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_POS_VENDAEMPRESARIAL.pe, pe as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pos_vendaEmpresarial );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_POS_VENDAEMPRESARIAL.st_msg , ref st_msg );
				
				DataPortable recv_dp_cont_pr = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (1).GetMapContainer ( COMM_OUT_EXEC_POS_VENDAEMPRESARIAL.pr , ref recv_dp_cont_pr );
				
				pr.Import ( recv_dp_cont_pr );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pos_confirmaVendaEmpresarial ( string st_nsu, ref POS_Entrada pe, ref string st_msg, ref POS_Resposta pr ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_POS_CONFIRMAVENDAEMPRESARIAL.st_nsu, st_nsu );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_POS_CONFIRMAVENDAEMPRESARIAL.pe, pe as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pos_confirmaVendaEmpresarial );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_POS_CONFIRMAVENDAEMPRESARIAL.st_msg , ref st_msg );
				
				DataPortable recv_dp_cont_pr = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (1).GetMapContainer ( COMM_OUT_EXEC_POS_CONFIRMAVENDAEMPRESARIAL.pr , ref recv_dp_cont_pr );
				
				pr.Import ( recv_dp_cont_pr );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_consultaTransacao ( ref DadosConsultaTransacao dct, ref CNetHeader header, ref string st_csv_id ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CONSULTATRANSACAO.dct, dct as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_FETCH_CONSULTATRANSACAO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_consultaTransacao );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONSULTATRANSACAO.st_csv_id , ref st_csv_id );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pf_gravaPendencia ( string st_telefoneLoja, string vr_valor, string st_telefone, ref string st_nsu, ref string st_codResp, ref string st_msg ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_GRAVAPENDENCIA.st_telefoneLoja, st_telefoneLoja );
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_GRAVAPENDENCIA.vr_valor, vr_valor );
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_GRAVAPENDENCIA.st_telefone, st_telefone );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pf_gravaPendencia );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_GRAVAPENDENCIA.st_nsu , ref st_nsu );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_GRAVAPENDENCIA.st_codResp , ref st_codResp );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_GRAVAPENDENCIA.st_msg , ref st_msg );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pf_consultaPendencia ( string st_telefone, ref string st_nsu, ref string st_valor, ref string st_nomeLoja, ref string st_codResp, ref string st_msg ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_CONSULTAPENDENCIA.st_telefone, st_telefone );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pf_consultaPendencia );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_CONSULTAPENDENCIA.st_nsu , ref st_nsu );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_CONSULTAPENDENCIA.st_valor , ref st_valor );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_CONSULTAPENDENCIA.st_nomeLoja , ref st_nomeLoja );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_CONSULTAPENDENCIA.st_codResp , ref st_codResp );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_CONSULTAPENDENCIA.st_msg , ref st_msg );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool type_pf_base ( string st_telefone, ref string st_codResp, ref string st_msg ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_TYPE_PF_BASE.st_telefone, st_telefone );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.type_pf_base );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_TYPE_PF_BASE.st_codResp , ref st_codResp );
				recv_dp.GetMapValue ( COMM_OUT_TYPE_PF_BASE.st_msg , ref st_msg );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pf_cancelaPendencia ( string st_nsu_cancelado, string st_telefone, ref string st_codResp, ref string st_msg ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_CANCELAPENDENCIA.st_nsu_cancelado, st_nsu_cancelado );
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_CANCELAPENDENCIA.st_telefone, st_telefone );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pf_cancelaPendencia );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_CANCELAPENDENCIA.st_codResp , ref st_codResp );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_CANCELAPENDENCIA.st_msg , ref st_msg );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pf_autorizaVendaPendente ( string st_nsu, string st_senha, string st_telefone, ref string st_nsu_autorizado, ref string st_codResp, ref string st_msg ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_AUTORIZAVENDAPENDENTE.st_nsu, st_nsu );
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_AUTORIZAVENDAPENDENTE.st_senha, st_senha );
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_AUTORIZAVENDAPENDENTE.st_telefone, st_telefone );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pf_autorizaVendaPendente );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_AUTORIZAVENDAPENDENTE.st_nsu_autorizado , ref st_nsu_autorizado );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_AUTORIZAVENDAPENDENTE.st_codResp , ref st_codResp );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_AUTORIZAVENDAPENDENTE.st_msg , ref st_msg );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pf_consultaAutorizacao ( string st_tel_lojista, string st_telefone, ref string st_codResp, ref string st_msg, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_CONSULTAAUTORIZACAO.st_tel_lojista, st_tel_lojista );
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_CONSULTAAUTORIZACAO.st_telefone, st_telefone );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pf_consultaAutorizacao );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_CONSULTAAUTORIZACAO.st_codResp , ref st_codResp );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_CONSULTAAUTORIZACAO.st_msg , ref st_msg );
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_EXEC_PF_CONSULTAAUTORIZACAO.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_payFone ( string st_pf_empresa, string st_pf_mat, string st_pf_telefone, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_INS_PAYFONE.st_pf_empresa, st_pf_empresa );
				send_dp.MapTagValue ( COMM_IN_INS_PAYFONE.st_pf_mat, st_pf_mat );
				send_dp.MapTagValue ( COMM_IN_INS_PAYFONE.st_pf_telefone, st_pf_telefone );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_PAYFONE.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_payFone );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_payFoneLojista ( string st_pf_empresa, string st_pf_term, string st_pf_telefone, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_INS_PAYFONELOJISTA.st_pf_empresa, st_pf_empresa );
				send_dp.MapTagValue ( COMM_IN_INS_PAYFONELOJISTA.st_pf_term, st_pf_term );
				send_dp.MapTagValue ( COMM_IN_INS_PAYFONELOJISTA.st_pf_telefone, st_pf_telefone );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_PAYFONELOJISTA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_payFoneLojista );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_alteraSenhaCartao ( string st_cart_empresa, string st_cart_mat, string st_cart_tit, string st_senha, string st_novaSenha, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERASENHACARTAO.st_cart_empresa, st_cart_empresa );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERASENHACARTAO.st_cart_mat, st_cart_mat );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERASENHACARTAO.st_cart_tit, st_cart_tit );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERASENHACARTAO.st_senha, st_senha );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERASENHACARTAO.st_novaSenha, st_novaSenha );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_ALTERASENHACARTAO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_alteraSenhaCartao );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pf_cancelaVenda ( string st_nsu_cancelado, string st_tel_lojista, string st_telefone, ref string st_codResp, ref string st_msg ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_CANCELAVENDA.st_nsu_cancelado, st_nsu_cancelado );
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_CANCELAVENDA.st_tel_lojista, st_tel_lojista );
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_CANCELAVENDA.st_telefone, st_telefone );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pf_cancelaVenda );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_CANCELAVENDA.st_codResp , ref st_codResp );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_CANCELAVENDA.st_msg , ref st_msg );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_pf_telefoneLojista ( string st_loja, ref CNetHeader header, ref string st_telefone ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_PF_TELEFONELOJISTA.st_loja, st_loja );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_PF_TELEFONELOJISTA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_pf_telefoneLojista );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_PF_TELEFONELOJISTA.st_telefone , ref st_telefone );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_dadosCartao ( string st_cart_empresa, string st_cart_mat, string st_cart_tit, ref CNetHeader header, ref string nu_maxParcelas, ref string vr_dispMes, ref string vr_dispTotal, ref string st_nome ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSCARTAO.st_cart_empresa, st_cart_empresa );
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSCARTAO.st_cart_mat, st_cart_mat );
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSCARTAO.st_cart_tit, st_cart_tit );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_DADOSCARTAO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_dadosCartao );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_DADOSCARTAO.nu_maxParcelas , ref nu_maxParcelas );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_DADOSCARTAO.vr_dispMes , ref vr_dispMes );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_DADOSCARTAO.vr_dispTotal , ref vr_dispTotal );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_DADOSCARTAO.st_nome , ref st_nome );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_nomeLoja ( string st_nomeLoja, string st_cod_empresa, ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_NOMELOJA.st_nomeLoja, st_nomeLoja );
				send_dp.MapTagValue ( COMM_IN_FETCH_NOMELOJA.st_cod_empresa, st_cod_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_NOMELOJA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_nomeLoja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_NOMELOJA.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_termLoja ( string st_cod_loja, ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_TERMLOJA.st_cod_loja, st_cod_loja );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_TERMLOJA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_termLoja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_TERMLOJA.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_nomeLojaTerminal ( string st_terminal, ref CNetHeader header, ref string st_nome_loja ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_NOMELOJATERMINAL.st_terminal, st_terminal );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_NOMELOJATERMINAL.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_nomeLojaTerminal );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_NOMELOJATERMINAL.st_nome_loja , ref st_nome_loja );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pf_cancelaPendenciaLojista ( string st_nsu_cancelado, string st_tel_lojista, string st_telefone, ref string st_codResp, ref string st_msg ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_CANCELAPENDENCIALOJISTA.st_nsu_cancelado, st_nsu_cancelado );
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_CANCELAPENDENCIALOJISTA.st_tel_lojista, st_tel_lojista );
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_CANCELAPENDENCIALOJISTA.st_telefone, st_telefone );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pf_cancelaPendenciaLojista );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_CANCELAPENDENCIALOJISTA.st_codResp , ref st_codResp );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_CANCELAPENDENCIALOJISTA.st_msg , ref st_msg );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_dadosNSU ( string st_nsu, string dt_hoje, string tg_confirmada, ref CNetHeader header, ref DadosNSU d_nsu ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSNSU.st_nsu, st_nsu );
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSNSU.dt_hoje, dt_hoje );
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSNSU.tg_confirmada, tg_confirmada );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_DADOSNSU.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_dadosNSU );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_cont_d_nsu = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (0).GetMapContainer ( COMM_OUT_FETCH_DADOSNSU.d_nsu , ref recv_dp_cont_d_nsu );
				
				d_nsu.Import ( recv_dp_cont_d_nsu );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pos_cancelaVendaEmpresarial ( string st_nsu_cancel, string dt_hoje, string id_user, ref POS_Entrada pe, ref string st_msg, ref POS_Resposta pr ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_POS_CANCELAVENDAEMPRESARIAL.st_nsu_cancel, st_nsu_cancel );
				send_dp.MapTagValue ( COMM_IN_EXEC_POS_CANCELAVENDAEMPRESARIAL.dt_hoje, dt_hoje );
				send_dp.MapTagValue ( COMM_IN_EXEC_POS_CANCELAVENDAEMPRESARIAL.id_user, id_user );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_POS_CANCELAVENDAEMPRESARIAL.pe, pe as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pos_cancelaVendaEmpresarial );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_POS_CANCELAVENDAEMPRESARIAL.st_msg , ref st_msg );
				
				DataPortable recv_dp_cont_pr = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (1).GetMapContainer ( COMM_OUT_EXEC_POS_CANCELAVENDAEMPRESARIAL.pr , ref recv_dp_cont_pr );
				
				pr.Import ( recv_dp_cont_pr );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_1_rtc ( string st_cart, string st_pf, string st_cidade, string st_estado, string st_loja, string st_dt_ini, string st_dt_fim, ref CNetHeader header, ref string st_csv, ref string st_empresa, ref string st_total_periodo, ref string st_cartao, ref string st_total_cancelado, ref string st_parcs, ref string st_parcs_total, ref string st_parcs_content ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_1_RTC.st_cart, st_cart );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_1_RTC.st_pf, st_pf );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_1_RTC.st_cidade, st_cidade );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_1_RTC.st_estado, st_estado );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_1_RTC.st_loja, st_loja );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_1_RTC.st_dt_ini, st_dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_1_RTC.st_dt_fim, st_dt_fim );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_1_RTC.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_1_rtc );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_1_RTC.st_csv , ref st_csv );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_1_RTC.st_empresa , ref st_empresa );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_1_RTC.st_total_periodo , ref st_total_periodo );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_1_RTC.st_cartao , ref st_cartao );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_1_RTC.st_total_cancelado , ref st_total_cancelado );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_1_RTC.st_parcs , ref st_parcs );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_1_RTC.st_parcs_total , ref st_parcs_total );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_1_RTC.st_parcs_content , ref st_parcs_content );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_2_rlt ( string st_loja, string st_dt_ini, string st_dt_fim, string st_empresa, ref CNetHeader header, ref string st_total, ref string st_total_cancelado, ref string st_csv_subtotal, ref string st_csv_subtotal_cancelado, ref string st_csv, ref string st_nome_loja, ref ArrayList lstTerminais ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_2_RLT.st_loja, st_loja );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_2_RLT.st_dt_ini, st_dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_2_RLT.st_dt_fim, st_dt_fim );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_2_RLT.st_empresa, st_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_2_RLT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_2_rlt );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_2_RLT.st_total , ref st_total );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_2_RLT.st_total_cancelado , ref st_total_cancelado );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_2_RLT.st_csv_subtotal , ref st_csv_subtotal );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_2_RLT.st_csv_subtotal_cancelado , ref st_csv_subtotal_cancelado );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_2_RLT.st_csv , ref st_csv );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_2_RLT.st_nome_loja , ref st_nome_loja );
				
				DataPortable recv_dp_array_generic_lstTerminais = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				
				recv_dp_array_generic_lstTerminais.GetMapArray ( COMM_OUT_FETCH_REL_2_RLT.lstTerminais , ref lstTerminais );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool schedule_nsu (  ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.schedule_nsu );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pf_autorizaInstalacao ( string st_codigo, ref string st_codResp, ref string st_msg, ref string st_telefone, ref string st_terminal, ref string tg_tipoCelular, ref string st_lojaTB ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_AUTORIZAINSTALACAO.st_codigo, st_codigo );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pf_autorizaInstalacao );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_AUTORIZAINSTALACAO.st_codResp , ref st_codResp );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_AUTORIZAINSTALACAO.st_msg , ref st_msg );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_AUTORIZAINSTALACAO.st_telefone , ref st_telefone );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_AUTORIZAINSTALACAO.st_terminal , ref st_terminal );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_AUTORIZAINSTALACAO.tg_tipoCelular , ref tg_tipoCelular );
				recv_dp.GetMapValue ( COMM_OUT_EXEC_PF_AUTORIZAINSTALACAO.st_lojaTB , ref st_lojaTB );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_agenda ( string st_empresa, string en_atividade, string en_tipo_schedule, string st_horario, string st_aux, string st_afiliada, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_INS_AGENDA.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_INS_AGENDA.en_atividade, en_atividade );
				send_dp.MapTagValue ( COMM_IN_INS_AGENDA.en_tipo_schedule, en_tipo_schedule );
				send_dp.MapTagValue ( COMM_IN_INS_AGENDA.st_horario, st_horario );
				send_dp.MapTagValue ( COMM_IN_INS_AGENDA.st_aux, st_aux );
				send_dp.MapTagValue ( COMM_IN_INS_AGENDA.st_afiliada, st_afiliada );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_AGENDA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_agenda );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool schedule_fech_mensal (  ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.schedule_fech_mensal );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_agenda ( ref CNetHeader header, ref string st_csv ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_AGENDA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_agenda );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_AGENDA.st_csv , ref st_csv );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool del_agenda ( string fk_agenda, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_DEL_AGENDA.fk_agenda, fk_agenda );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_DEL_AGENDA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.del_agenda );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_3_fech ( string en_tipo, string st_mes, string st_ano, string st_cod_empresa, string st_afiliada, ref CNetHeader header, ref string st_empresa, ref string st_csv_cartao, ref string st_csv_loja, ref string st_csv_loja_content, ref string st_csv_subtotal_loja, ref string st_csv_subtotal_cartao, ref string st_csv_cartao_content, ref string st_total ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_3_FECH.en_tipo, en_tipo );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_3_FECH.st_mes, st_mes );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_3_FECH.st_ano, st_ano );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_3_FECH.st_cod_empresa, st_cod_empresa );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_3_FECH.st_afiliada, st_afiliada );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_3_FECH.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_3_fech );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_3_FECH.st_empresa , ref st_empresa );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_3_FECH.st_csv_cartao , ref st_csv_cartao );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_3_FECH.st_csv_loja , ref st_csv_loja );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_3_FECH.st_csv_loja_content , ref st_csv_loja_content );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_3_FECH.st_csv_subtotal_loja , ref st_csv_subtotal_loja );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_3_FECH.st_csv_subtotal_cartao , ref st_csv_subtotal_cartao );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_3_FECH.st_csv_cartao_content , ref st_csv_cartao_content );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_3_FECH.st_total , ref st_total );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_memory ( string st_block, string st_bytes, ref string st_new_block, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_MEMORY.st_block, st_block );
				send_dp.MapTagValue ( COMM_IN_FETCH_MEMORY.st_bytes, st_bytes );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_memory );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_MEMORY.st_new_block , ref st_new_block );
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_MEMORY.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool schedule_educacional (  ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.schedule_educacional );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_listaConveniosLoja ( string st_loja, ref CNetHeader header, ref string st_cnpj, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_LISTACONVENIOSLOJA.st_loja, st_loja );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_LISTACONVENIOSLOJA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_listaConveniosLoja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_LISTACONVENIOSLOJA.st_cnpj , ref st_cnpj );
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_LISTACONVENIOSLOJA.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_4_rrp ( string st_empresa, string dt_ini, string dt_fim, ref CNetHeader header, ref string st_csv_content, ref string st_nome_empresa, ref string st_csv_lojas, ref string st_csv_subtotal, ref string st_total, ref string st_csv_nome_lojas, ref string st_csv_subtotal_geral, ref string st_total_geral ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_4_RRP.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_4_RRP.dt_ini, dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_4_RRP.dt_fim, dt_fim );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_4_RRP.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_4_rrp );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_4_RRP.st_csv_content , ref st_csv_content );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_4_RRP.st_nome_empresa , ref st_nome_empresa );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_4_RRP.st_csv_lojas , ref st_csv_lojas );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_4_RRP.st_csv_subtotal , ref st_csv_subtotal );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_4_RRP.st_total , ref st_total );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_4_RRP.st_csv_nome_lojas , ref st_csv_nome_lojas );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_4_RRP.st_csv_subtotal_geral , ref st_csv_subtotal_geral );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_4_RRP.st_total_geral , ref st_total_geral );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_dadosAluno ( string st_cartao, ref CNetHeader header, ref DadosCartaoEdu dce ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSALUNO.st_cartao, st_cartao );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_DADOSALUNO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_dadosAluno );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_cont_dce = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (0).GetMapContainer ( COMM_OUT_FETCH_DADOSALUNO.dce , ref recv_dp_cont_dce );
				
				dce.Import ( recv_dp_cont_dce );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_depotEduImediato ( string st_pass, string vr_valor, string st_valor_imediato, string st_empresa, string st_cartao, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_DEPOTEDUIMEDIATO.st_pass, st_pass );
				send_dp.MapTagValue ( COMM_IN_EXEC_DEPOTEDUIMEDIATO.vr_valor, vr_valor );
				send_dp.MapTagValue ( COMM_IN_EXEC_DEPOTEDUIMEDIATO.st_valor_imediato, st_valor_imediato );
				send_dp.MapTagValue ( COMM_IN_EXEC_DEPOTEDUIMEDIATO.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_EXEC_DEPOTEDUIMEDIATO.st_cartao, st_cartao );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_DEPOTEDUIMEDIATO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_depotEduImediato );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_edu_extrato ( string st_dt_ini, string st_dt_fim, string st_emp, string st_mat, ref CNetHeader header, ref string st_csv, ref string st_empresa, ref string st_total_periodo ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_EDU_EXTRATO.st_dt_ini, st_dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_EDU_EXTRATO.st_dt_fim, st_dt_fim );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_EDU_EXTRATO.st_emp, st_emp );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_EDU_EXTRATO.st_mat, st_mat );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_EDU_EXTRATO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_edu_extrato );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_EDU_EXTRATO.st_csv , ref st_csv );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_EDU_EXTRATO.st_empresa , ref st_empresa );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_EDU_EXTRATO.st_total_periodo , ref st_total_periodo );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_bloqueio ( string st_cartao, string st_motivo, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_BLOQUEIO.st_cartao, st_cartao );
				send_dp.MapTagValue ( COMM_IN_EXEC_BLOQUEIO.st_motivo, st_motivo );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_BLOQUEIO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_bloqueio );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_desbloqueio ( string st_cartao, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_DESBLOQUEIO.st_cartao, st_cartao );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_DESBLOQUEIO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_desbloqueio );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_cancelaEmpresa ( string st_pass_user, string st_empresa, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_CANCELAEMPRESA.st_pass_user, st_pass_user );
				send_dp.MapTagValue ( COMM_IN_EXEC_CANCELAEMPRESA.st_empresa, st_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_CANCELAEMPRESA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_cancelaEmpresa );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool web_fetch_saldo_edu ( string st_cartao, string st_senha, string tg_resp, ref DadosCartaoEdu dce ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_SALDO_EDU.st_cartao, st_cartao );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_SALDO_EDU.st_senha, st_senha );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_SALDO_EDU.tg_resp, tg_resp );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.web_fetch_saldo_edu );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_cont_dce = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (0).GetMapContainer ( COMM_OUT_WEB_FETCH_SALDO_EDU.dce , ref recv_dp_cont_dce );
				
				dce.Import ( recv_dp_cont_dce );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool web_fetch_edu_inicial ( string st_cpf, string st_cartao, string st_senha, string st_ip, ref string tg_resp ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_EDU_INICIAL.st_cpf, st_cpf );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_EDU_INICIAL.st_cartao, st_cartao );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_EDU_INICIAL.st_senha, st_senha );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_EDU_INICIAL.st_ip, st_ip );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.web_fetch_edu_inicial );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_WEB_FETCH_EDU_INICIAL.tg_resp , ref tg_resp );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool web_fetch_rel_edu_extrato ( string st_cart, string st_senha, string st_dt_ini, string st_dt_fim, string tg_resp, ref string st_csv, ref string st_total_periodo ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_REL_EDU_EXTRATO.st_cart, st_cart );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_REL_EDU_EXTRATO.st_senha, st_senha );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_REL_EDU_EXTRATO.st_dt_ini, st_dt_ini );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_REL_EDU_EXTRATO.st_dt_fim, st_dt_fim );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_REL_EDU_EXTRATO.tg_resp, tg_resp );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.web_fetch_rel_edu_extrato );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_WEB_FETCH_REL_EDU_EXTRATO.st_csv , ref st_csv );
				recv_dp.GetMapValue ( COMM_OUT_WEB_FETCH_REL_EDU_EXTRATO.st_total_periodo , ref st_total_periodo );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool web_fetch_resp_alunos ( string st_cpf, string st_senha, ref string st_nomeResp, ref ArrayList lst, ref ArrayList lstMsg ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_RESP_ALUNOS.st_cpf, st_cpf );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_RESP_ALUNOS.st_senha, st_senha );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.web_fetch_resp_alunos );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_WEB_FETCH_RESP_ALUNOS.st_nomeResp , ref st_nomeResp );
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				DataPortable recv_dp_array_generic_lstMsg = m_Client.m_RespComm.GetExitPortableAtPosition (2);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_WEB_FETCH_RESP_ALUNOS.lst , ref lst );
				recv_dp_array_generic_lstMsg.GetMapArray ( COMM_OUT_WEB_FETCH_RESP_ALUNOS.lstMsg , ref lstMsg );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool web_exec_trocaLim ( string st_cartao, string st_senha, string vr_dispDiario, string tg_semanaToda ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_TROCALIM.st_cartao, st_cartao );
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_TROCALIM.st_senha, st_senha );
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_TROCALIM.vr_dispDiario, vr_dispDiario );
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_TROCALIM.tg_semanaToda, tg_semanaToda );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.web_exec_trocaLim );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool web_exec_alterSenhaEdu ( string st_cpf, string st_senha, string st_novaSenha, string tg_resp ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_ALTERSENHAEDU.st_cpf, st_cpf );
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_ALTERSENHAEDU.st_senha, st_senha );
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_ALTERSENHAEDU.st_novaSenha, st_novaSenha );
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_ALTERSENHAEDU.tg_resp, tg_resp );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.web_exec_alterSenhaEdu );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool schedule_batch (  ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.schedule_batch );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool schedule_proc_batch (  ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.schedule_proc_batch );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool load_edu (  ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.load_edu );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool type_load (  ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.type_load );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_edu_habilita ( string st_cartao, string st_senha, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_EDU_HABILITA.st_cartao, st_cartao );
				send_dp.MapTagValue ( COMM_IN_EXEC_EDU_HABILITA.st_senha, st_senha );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_EDU_HABILITA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_edu_habilita );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_cartoes_grafica ( string st_empresa, ref CNetHeader header, ref string st_csv ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_CARTOES_GRAFICA.st_empresa, st_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CARTOES_GRAFICA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_cartoes_grafica );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CARTOES_GRAFICA.st_csv , ref st_csv );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_edu_alteraDiario ( string st_pass, string vr_diario, string st_cartao, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_EDU_ALTERADIARIO.st_pass, st_pass );
				send_dp.MapTagValue ( COMM_IN_EXEC_EDU_ALTERADIARIO.vr_diario, vr_diario );
				send_dp.MapTagValue ( COMM_IN_EXEC_EDU_ALTERADIARIO.st_cartao, st_cartao );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_EDU_ALTERADIARIO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_edu_alteraDiario );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool web_fetch_edu_virtual ( string st_cartao, string st_senha, string dt_mov, ref DadosCartaoEdu dce, ref ArrayList lst, ref ArrayList lstEmp ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_EDU_VIRTUAL.st_cartao, st_cartao );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_EDU_VIRTUAL.st_senha, st_senha );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_EDU_VIRTUAL.dt_mov, dt_mov );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.web_fetch_edu_virtual );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_cont_dce = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (0).GetMapContainer ( COMM_OUT_WEB_FETCH_EDU_VIRTUAL.dce , ref recv_dp_cont_dce );
				
				dce.Import ( recv_dp_cont_dce );
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				DataPortable recv_dp_array_generic_lstEmp = m_Client.m_RespComm.GetExitPortableAtPosition (2);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_WEB_FETCH_EDU_VIRTUAL.lst , ref lst );
				recv_dp_array_generic_lstEmp.GetMapArray ( COMM_OUT_WEB_FETCH_EDU_VIRTUAL.lstEmp , ref lstEmp );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool load_edu_emp_virtual (  ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.load_edu_emp_virtual );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool schedule_edu_fundo (  ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.schedule_edu_fundo );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool web_fetch_edu_emp_hist ( string st_cartao, string st_senha, string st_codigo, ref string st_csv ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_EDU_EMP_HIST.st_cartao, st_cartao );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_EDU_EMP_HIST.st_senha, st_senha );
				send_dp.MapTagValue ( COMM_IN_WEB_FETCH_EDU_EMP_HIST.st_codigo, st_codigo );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.web_fetch_edu_emp_hist );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_WEB_FETCH_EDU_EMP_HIST.st_csv , ref st_csv );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool web_exec_edu_aplic_fundo ( string st_cartao, string st_senha, string st_codigo, string st_valor ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_EDU_APLIC_FUNDO.st_cartao, st_cartao );
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_EDU_APLIC_FUNDO.st_senha, st_senha );
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_EDU_APLIC_FUNDO.st_codigo, st_codigo );
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_EDU_APLIC_FUNDO.st_valor, st_valor );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.web_exec_edu_aplic_fundo );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_edu_cancelaCartao ( string st_cartao, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_EDU_CANCELACARTAO.st_cartao, st_cartao );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_EDU_CANCELACARTAO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_edu_cancelaCartao );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_edu_segundaVia ( string st_cartao, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_EDU_SEGUNDAVIA.st_cartao, st_cartao );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_EDU_SEGUNDAVIA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_edu_segundaVia );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_dadosAdministradora ( string st_empresa, ref CNetHeader header, ref string st_in_csv, ref string st_out_csv ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSADMINISTRADORA.st_empresa, st_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_DADOSADMINISTRADORA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_dadosAdministradora );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_DADOSADMINISTRADORA.st_in_csv , ref st_in_csv );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_DADOSADMINISTRADORA.st_out_csv , ref st_out_csv );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_alteraAdminEmpresa ( string st_empresa_admin, string tg_remover, string st_empresa_destino, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERAADMINEMPRESA.st_empresa_admin, st_empresa_admin );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERAADMINEMPRESA.tg_remover, tg_remover );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERAADMINEMPRESA.st_empresa_destino, st_empresa_destino );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_ALTERAADMINEMPRESA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_alteraAdminEmpresa );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool web_fetch_edu_ranking ( ref string st_csv ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.web_fetch_edu_ranking );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_WEB_FETCH_EDU_RANKING.st_csv , ref st_csv );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_conf_cartao ( string st_cartao, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_CONF_CARTAO.st_cartao, st_cartao );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_CONF_CARTAO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_conf_cartao );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_edu_nomeAluno ( string st_nome, ref CNetHeader header, ref string st_csv ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_EDU_NOMEALUNO.st_nome, st_nome );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_EDU_NOMEALUNO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_edu_nomeAluno );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_EDU_NOMEALUNO.st_csv , ref st_csv );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool load_legado (  ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.load_legado );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_5_rle ( string st_empresa, string st_dt_ini, string st_dt_fim, ref CNetHeader header, ref string st_total, ref string st_total_cancelado, ref string st_csv_subtotal, ref string st_csv_subtotal_cancelado, ref string st_csv, ref string st_nome_empresa, ref ArrayList lstLojas ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_5_RLE.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_5_RLE.st_dt_ini, st_dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_5_RLE.st_dt_fim, st_dt_fim );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_5_RLE.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_5_rle );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_5_RLE.st_total , ref st_total );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_5_RLE.st_total_cancelado , ref st_total_cancelado );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_5_RLE.st_csv_subtotal , ref st_csv_subtotal );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_5_RLE.st_csv_subtotal_cancelado , ref st_csv_subtotal_cancelado );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_5_RLE.st_csv , ref st_csv );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_5_RLE.st_nome_empresa , ref st_nome_empresa );
				
				DataPortable recv_dp_array_generic_lstLojas = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				
				recv_dp_array_generic_lstLojas.GetMapArray ( COMM_OUT_FETCH_REL_5_RLE.lstLojas , ref lstLojas );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pos_desfazVendaEmpresarial ( ref POS_Entrada pe, ref string st_msg, ref POS_Resposta pr ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_POS_DESFAZVENDAEMPRESARIAL.pe, pe as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pos_desfazVendaEmpresarial );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_POS_DESFAZVENDAEMPRESARIAL.st_msg , ref st_msg );
				
				DataPortable recv_dp_cont_pr = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (1).GetMapContainer ( COMM_OUT_EXEC_POS_DESFAZVENDAEMPRESARIAL.pr , ref recv_dp_cont_pr );
				
				pr.Import ( recv_dp_cont_pr );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool schedule_faturamento (  ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.schedule_faturamento );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_dadosFaturamento ( string tg_empresa, string st_codigo, ref CNetHeader header, ref string st_msg, ref string vr_valor ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSFATURAMENTO.tg_empresa, tg_empresa );
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSFATURAMENTO.st_codigo, st_codigo );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_DADOSFATURAMENTO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_dadosFaturamento );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_DADOSFATURAMENTO.st_msg , ref st_msg );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_DADOSFATURAMENTO.vr_valor , ref vr_valor );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_despesa ( string vr_cobranca, string st_codigo, string tg_empresa, string st_extra, string tg_desconto, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_INS_DESPESA.vr_cobranca, vr_cobranca );
				send_dp.MapTagValue ( COMM_IN_INS_DESPESA.st_codigo, st_codigo );
				send_dp.MapTagValue ( COMM_IN_INS_DESPESA.tg_empresa, tg_empresa );
				send_dp.MapTagValue ( COMM_IN_INS_DESPESA.st_extra, st_extra );
				send_dp.MapTagValue ( COMM_IN_INS_DESPESA.tg_desconto, tg_desconto );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_DESPESA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_despesa );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_dadosDespesas ( string tg_empresa, string st_codigo, ref CNetHeader header, ref string st_nome, ref ArrayList list ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSDESPESAS.tg_empresa, tg_empresa );
				send_dp.MapTagValue ( COMM_IN_FETCH_DADOSDESPESAS.st_codigo, st_codigo );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_DADOSDESPESAS.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_dadosDespesas );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_DADOSDESPESAS.st_nome , ref st_nome );
				
				DataPortable recv_dp_array_generic_list = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				
				recv_dp_array_generic_list.GetMapArray ( COMM_OUT_FETCH_DADOSDESPESAS.list , ref list );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_cancelaDespesa ( string fk_faturamentoDetalhe, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_CANCELADESPESA.fk_faturamentoDetalhe, fk_faturamentoDetalhe );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_CANCELADESPESA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_cancelaDespesa );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_6_fat ( string st_dt_ini, string st_dt_fim, ref CNetHeader header, ref string st_total, ref string st_total_desconto, ref string st_csv_subtotal, ref string st_csv_subtotal_desconto, ref string st_content_block, ref string st_emp_loj_block, ref string CartaoAtiv, ref string Extras, ref string FixoTrans, ref string Percent, ref string TBM ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_6_FAT.st_dt_ini, st_dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_6_FAT.st_dt_fim, st_dt_fim );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_6_FAT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_6_fat );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_6_FAT.st_total , ref st_total );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_6_FAT.st_total_desconto , ref st_total_desconto );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_6_FAT.st_csv_subtotal , ref st_csv_subtotal );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_6_FAT.st_csv_subtotal_desconto , ref st_csv_subtotal_desconto );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_6_FAT.st_content_block , ref st_content_block );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_6_FAT.st_emp_loj_block , ref st_emp_loj_block );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_6_FAT.CartaoAtiv , ref CartaoAtiv );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_6_FAT.Extras , ref Extras );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_6_FAT.FixoTrans , ref FixoTrans );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_6_FAT.Percent , ref Percent );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_6_FAT.TBM , ref TBM );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_segundaVia ( string st_empresa, string st_mat, string st_tit, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_SEGUNDAVIA.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_EXEC_SEGUNDAVIA.st_mat, st_mat );
				send_dp.MapTagValue ( COMM_IN_EXEC_SEGUNDAVIA.st_tit, st_tit );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_SEGUNDAVIA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_segundaVia );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_arquivoFat ( string dia_venc_ini, string dia_venc_fim, string tg_debito, ref CNetHeader header, ref string st_msg, ref string nu_nsFat ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_ARQUIVOFAT.dia_venc_ini, dia_venc_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_ARQUIVOFAT.dia_venc_fim, dia_venc_fim );
				send_dp.MapTagValue ( COMM_IN_FETCH_ARQUIVOFAT.tg_debito, tg_debito );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_ARQUIVOFAT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_arquivoFat );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_ARQUIVOFAT.st_msg , ref st_msg );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_ARQUIVOFAT.nu_nsFat , ref nu_nsFat );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool upload_archive ( string st_id, ref CNetHeader header, ref ArrayList lst, ref string st_new_id ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_UPLOAD_ARCHIVE.st_id, st_id );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_UPLOAD_ARCHIVE.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				DataPortable send_dp_array_generic_lst = new DataPortable();
				
				send_dp_array_generic_lst.MapTagArray ( COMM_IN_UPLOAD_ARCHIVE.lst, ref lst ); 
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_array_generic_lst );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.upload_archive );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_UPLOAD_ARCHIVE.st_new_id , ref st_new_id );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_processaArqBancario ( string st_id, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_PROCESSAARQBANCARIO.st_id, st_id );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_PROCESSAARQBANCARIO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_processaArqBancario );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_relFat ( string st_dt_ini, string st_dt_fim, string tg_type, ref CNetHeader header, ref string st_total, ref string st_content_block ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_RELFAT.st_dt_ini, st_dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_RELFAT.st_dt_fim, st_dt_fim );
				send_dp.MapTagValue ( COMM_IN_FETCH_RELFAT.tg_type, tg_type );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_RELFAT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_relFat );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_RELFAT.st_total , ref st_total );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_RELFAT.st_content_block , ref st_content_block );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_alteraProprietario ( string st_cpf_cnpj, ref DadosProprietario dp, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERAPROPRIETARIO.st_cpf_cnpj, st_cpf_cnpj );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_ALTERAPROPRIETARIO.dp, dp as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_EXEC_ALTERAPROPRIETARIO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_alteraProprietario );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_conveyUsuarios ( ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CONVEYUSUARIOS.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_conveyUsuarios );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_CONVEYUSUARIOS.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_chamados ( string nu_categ, string nu_prioridade, string st_operador, string tg_closed, string dt_ini_ab, string dt_fim_ab, string dt_ini_fech, string dt_fim_fech, string tg_tecnico, string st_loja, string st_resp, ref CNetHeader header, ref string st_block ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_CHAMADOS.nu_categ, nu_categ );
				send_dp.MapTagValue ( COMM_IN_FETCH_CHAMADOS.nu_prioridade, nu_prioridade );
				send_dp.MapTagValue ( COMM_IN_FETCH_CHAMADOS.st_operador, st_operador );
				send_dp.MapTagValue ( COMM_IN_FETCH_CHAMADOS.tg_closed, tg_closed );
				send_dp.MapTagValue ( COMM_IN_FETCH_CHAMADOS.dt_ini_ab, dt_ini_ab );
				send_dp.MapTagValue ( COMM_IN_FETCH_CHAMADOS.dt_fim_ab, dt_fim_ab );
				send_dp.MapTagValue ( COMM_IN_FETCH_CHAMADOS.dt_ini_fech, dt_ini_fech );
				send_dp.MapTagValue ( COMM_IN_FETCH_CHAMADOS.dt_fim_fech, dt_fim_fech );
				send_dp.MapTagValue ( COMM_IN_FETCH_CHAMADOS.tg_tecnico, tg_tecnico );
				send_dp.MapTagValue ( COMM_IN_FETCH_CHAMADOS.st_loja, st_loja );
				send_dp.MapTagValue ( COMM_IN_FETCH_CHAMADOS.st_resp, st_resp );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CHAMADOS.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_chamados );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CHAMADOS.st_block , ref st_block );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_chamado ( ref DadosChamado dc, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_CHAMADO.dc, dc as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_INS_CHAMADO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_chamado );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_chamadoHist ( string id_chamado, ref CNetHeader header, ref DadosChamado dc, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_CHAMADOHIST.id_chamado, id_chamado );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CHAMADOHIST.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_chamadoHist );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_cont_dc = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (0).GetMapContainer ( COMM_OUT_FETCH_CHAMADOHIST.dc , ref recv_dp_cont_dc );
				
				dc.Import ( recv_dp_cont_dc );
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_CHAMADOHIST.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_alteraChamado ( string id_chamado, string st_new_desc, string tg_fechado, string st_operador, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERACHAMADO.id_chamado, id_chamado );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERACHAMADO.st_new_desc, st_new_desc );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERACHAMADO.tg_fechado, tg_fechado );
				send_dp.MapTagValue ( COMM_IN_EXEC_ALTERACHAMADO.st_operador, st_operador );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_ALTERACHAMADO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_alteraChamado );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_extraGift ( ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_EXTRAGIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_extraGift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_EXTRAGIFT.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_extraGift ( ref DadosProdutoGift prod, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_EXTRAGIFT.prod, prod as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_INS_EXTRAGIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_extraGift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool del_extraGift ( string id, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_DEL_EXTRAGIFT.id, id );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_DEL_EXTRAGIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.del_extraGift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_quiosque ( string st_empresa, ref CNetHeader header, ref ArrayList lstQ ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_QUIOSQUE.st_empresa, st_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_QUIOSQUE.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_quiosque );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lstQ = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lstQ.GetMapArray ( COMM_OUT_FETCH_QUIOSQUE.lstQ , ref lstQ );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_vendedorQuiosque ( string st_empresa, string st_desc, ref CNetHeader header, ref ArrayList lstVinc, ref ArrayList lstOutros ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_VENDEDORQUIOSQUE.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_FETCH_VENDEDORQUIOSQUE.st_desc, st_desc );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_VENDEDORQUIOSQUE.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_vendedorQuiosque );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lstVinc = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				DataPortable recv_dp_array_generic_lstOutros = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				
				recv_dp_array_generic_lstVinc.GetMapArray ( COMM_OUT_FETCH_VENDEDORQUIOSQUE.lstVinc , ref lstVinc );
				recv_dp_array_generic_lstOutros.GetMapArray ( COMM_OUT_FETCH_VENDEDORQUIOSQUE.lstOutros , ref lstOutros );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_vincQuiosque ( string st_quiosque, string st_empresa, string id_user, string tg_remover, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_VINCQUIOSQUE.st_quiosque, st_quiosque );
				send_dp.MapTagValue ( COMM_IN_EXEC_VINCQUIOSQUE.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_EXEC_VINCQUIOSQUE.id_user, id_user );
				send_dp.MapTagValue ( COMM_IN_EXEC_VINCQUIOSQUE.tg_remover, tg_remover );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_VINCQUIOSQUE.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_vincQuiosque );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_quiosque ( string st_empresa, string st_desc, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_INS_QUIOSQUE.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_INS_QUIOSQUE.st_desc, st_desc );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_QUIOSQUE.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_quiosque );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool del_quiosque ( string st_empresa, string st_desc, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_DEL_QUIOSQUE.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_DEL_QUIOSQUE.st_desc, st_desc );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_DEL_QUIOSQUE.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.del_quiosque );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_comprov_Gift ( string id_gift, string tg_reimp, ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_COMPROV_GIFT.id_gift, id_gift );
				send_dp.MapTagValue ( COMM_IN_FETCH_COMPROV_GIFT.tg_reimp, tg_reimp );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_COMPROV_GIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_comprov_Gift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_COMPROV_GIFT.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_validGift ( string st_acesso, string st_empresa, string st_matricula, string tg_recarga, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_VALIDGIFT.st_acesso, st_acesso );
				send_dp.MapTagValue ( COMM_IN_EXEC_VALIDGIFT.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_EXEC_VALIDGIFT.st_matricula, st_matricula );
				send_dp.MapTagValue ( COMM_IN_EXEC_VALIDGIFT.tg_recarga, tg_recarga );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_VALIDGIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_validGift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_recargaGift ( string st_empresa, string st_matricula, string vr_carga, string tg_tipoPag, string tg_tipoCartao, string st_cheque, string tg_adesao, ref CNetHeader header, ref ArrayList lstProd, ref string id_gift ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_RECARGAGIFT.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_EXEC_RECARGAGIFT.st_matricula, st_matricula );
				send_dp.MapTagValue ( COMM_IN_EXEC_RECARGAGIFT.vr_carga, vr_carga );
				send_dp.MapTagValue ( COMM_IN_EXEC_RECARGAGIFT.tg_tipoPag, tg_tipoPag );
				send_dp.MapTagValue ( COMM_IN_EXEC_RECARGAGIFT.tg_tipoCartao, tg_tipoCartao );
				send_dp.MapTagValue ( COMM_IN_EXEC_RECARGAGIFT.st_cheque, st_cheque );
				send_dp.MapTagValue ( COMM_IN_EXEC_RECARGAGIFT.tg_adesao, tg_adesao );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_RECARGAGIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				DataPortable send_dp_array_generic_lstProd = new DataPortable();
				
				send_dp_array_generic_lstProd.MapTagArray ( COMM_IN_EXEC_RECARGAGIFT.lstProd, ref lstProd ); 
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_array_generic_lstProd );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_recargaGift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_RECARGAGIFT.id_gift , ref id_gift );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_consultaLojasGift ( string st_empresa, ref CNetHeader header, ref string st_csv_id ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_CONSULTALOJASGIFT.st_empresa, st_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CONSULTALOJASGIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_consultaLojasGift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONSULTALOJASGIFT.st_csv_id , ref st_csv_id );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_consultaCartaoGift ( string st_empresa, string st_matricula, ref CNetHeader header, ref string st_nome, ref string vr_disp, ref string st_sit, ref ArrayList lstCred, ref ArrayList lstProd, ref ArrayList lstComprov ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_CONSULTACARTAOGIFT.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_FETCH_CONSULTACARTAOGIFT.st_matricula, st_matricula );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CONSULTACARTAOGIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_consultaCartaoGift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONSULTACARTAOGIFT.st_nome , ref st_nome );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONSULTACARTAOGIFT.vr_disp , ref vr_disp );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONSULTACARTAOGIFT.st_sit , ref st_sit );
				
				DataPortable recv_dp_array_generic_lstCred = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				DataPortable recv_dp_array_generic_lstProd = m_Client.m_RespComm.GetExitPortableAtPosition (2);
				DataPortable recv_dp_array_generic_lstComprov = m_Client.m_RespComm.GetExitPortableAtPosition (3);
				
				recv_dp_array_generic_lstCred.GetMapArray ( COMM_OUT_FETCH_CONSULTACARTAOGIFT.lstCred , ref lstCred );
				recv_dp_array_generic_lstProd.GetMapArray ( COMM_OUT_FETCH_CONSULTACARTAOGIFT.lstProd , ref lstProd );
				recv_dp_array_generic_lstComprov.GetMapArray ( COMM_OUT_FETCH_CONSULTACARTAOGIFT.lstComprov , ref lstComprov );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_reciboVendaGift ( string nsu, ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_RECIBOVENDAGIFT.nsu, nsu );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_RECIBOVENDAGIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_reciboVendaGift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_RECIBOVENDAGIFT.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_proprietarioGift ( string st_matricula, ref CNetHeader header, ref DadosProprietario dp ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_PROPRIETARIOGIFT.st_matricula, st_matricula );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_PROPRIETARIOGIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_proprietarioGift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_cont_dp = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (0).GetMapContainer ( COMM_OUT_FETCH_PROPRIETARIOGIFT.dp , ref recv_dp_cont_dp );
				
				dp.Import ( recv_dp_cont_dp );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_chequeGift ( string st_ident, ref CNetHeader header, ref string st_dados ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_CHEQUEGIFT.st_ident, st_ident );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CHEQUEGIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_chequeGift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CHEQUEGIFT.st_dados , ref st_dados );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_compensaChequeGift ( string st_ident, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_COMPENSACHEQUEGIFT.st_ident, st_ident );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_COMPENSACHEQUEGIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_compensaChequeGift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_cancelaChequeGift ( string st_ident, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_CANCELACHEQUEGIFT.st_ident, st_ident );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_CANCELACHEQUEGIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_cancelaChequeGift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_repasseData ( string dt_ini, ref CNetHeader header, ref string block_detalhe_loja, ref string block_sumario_loja ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REPASSEDATA.dt_ini, dt_ini );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REPASSEDATA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_repasseData );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REPASSEDATA.block_detalhe_loja , ref block_detalhe_loja );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REPASSEDATA.block_sumario_loja , ref block_sumario_loja );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_repasseLoja ( string st_codLoja, string tg_opcao, string st_ident, string vr_valor, ref CNetHeader header, ref ArrayList lstPar, ref string id_confRepasse ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_REPASSELOJA.st_codLoja, st_codLoja );
				send_dp.MapTagValue ( COMM_IN_EXEC_REPASSELOJA.tg_opcao, tg_opcao );
				send_dp.MapTagValue ( COMM_IN_EXEC_REPASSELOJA.st_ident, st_ident );
				send_dp.MapTagValue ( COMM_IN_EXEC_REPASSELOJA.vr_valor, vr_valor );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_REPASSELOJA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				DataPortable send_dp_array_generic_lstPar = new DataPortable();
				
				send_dp_array_generic_lstPar.MapTagArray ( COMM_IN_EXEC_REPASSELOJA.lstPar, ref lstPar ); 
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_array_generic_lstPar );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_repasseLoja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_REPASSELOJA.id_confRepasse , ref id_confRepasse );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_convenioLojaGift ( string st_loja, ref CNetHeader header, ref string st_banco, ref string st_ag, ref string st_conta ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_CONVENIOLOJAGIFT.st_loja, st_loja );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CONVENIOLOJAGIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_convenioLojaGift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONVENIOLOJAGIFT.st_banco , ref st_banco );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONVENIOLOJAGIFT.st_ag , ref st_ag );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONVENIOLOJAGIFT.st_conta , ref st_conta );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_softwareVersion ( string st_version, ref string st_versionOutdated ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_SOFTWAREVERSION.st_version, st_version );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_softwareVersion );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_SOFTWAREVERSION.st_versionOutdated , ref st_versionOutdated );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool infra_fetchIncomingVersion ( string app, ref string st_csv_files, ref string st_version ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_INFRA_FETCHINCOMINGVERSION.app, app );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.infra_fetchIncomingVersion );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_INFRA_FETCHINCOMINGVERSION.st_csv_files , ref st_csv_files );
				recv_dp.GetMapValue ( COMM_OUT_INFRA_FETCHINCOMINGVERSION.st_version , ref st_version );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool infra_fetchFile ( string st_part, ref string st_next_part, ref string st_content ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_INFRA_FETCHFILE.st_part, st_part );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.infra_fetchFile );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_INFRA_FETCHFILE.st_next_part , ref st_next_part );
				recv_dp.GetMapValue ( COMM_OUT_INFRA_FETCHFILE.st_content , ref st_content );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool infra_fetchUpdaterVersion ( ref string st_csv_files ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.infra_fetchUpdaterVersion );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_INFRA_FETCHUPDATERVERSION.st_csv_files , ref st_csv_files );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_repEfetivo ( string st_empresa, string dt_ini, string dt_fim, string st_loja, ref CNetHeader header, ref string st_csv_contents, ref string st_csv_pagto, ref string st_nome_empresa, ref string st_csv_lojas ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_REPEFETIVO.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_REPEFETIVO.dt_ini, dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_REPEFETIVO.dt_fim, dt_fim );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_REPEFETIVO.st_loja, st_loja );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_REPEFETIVO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_repEfetivo );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_REPEFETIVO.st_csv_contents , ref st_csv_contents );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_REPEFETIVO.st_csv_pagto , ref st_csv_pagto );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_REPEFETIVO.st_nome_empresa , ref st_nome_empresa );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_REPEFETIVO.st_csv_lojas , ref st_csv_lojas );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_consultaLojista ( string cnpj, string dt_ini, string dt_fim, string pass, ref string st_content ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_CONSULTALOJISTA.cnpj, cnpj );
				send_dp.MapTagValue ( COMM_IN_FETCH_CONSULTALOJISTA.dt_ini, dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_CONSULTALOJISTA.dt_fim, dt_fim );
				send_dp.MapTagValue ( COMM_IN_FETCH_CONSULTALOJISTA.pass, pass );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_consultaLojista );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONSULTALOJISTA.st_content , ref st_content );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_fechCaixa ( string st_empresa, string dt_ini, string dt_fim, ref CNetHeader header, ref string st_csv_contents, ref string st_nome_empresa, ref ArrayList lstQuiosques ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_FECHCAIXA.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_FECHCAIXA.dt_ini, dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_FECHCAIXA.dt_fim, dt_fim );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_FECHCAIXA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_fechCaixa );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_FECHCAIXA.st_csv_contents , ref st_csv_contents );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_FECHCAIXA.st_nome_empresa , ref st_nome_empresa );
				
				DataPortable recv_dp_array_generic_lstQuiosques = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				
				recv_dp_array_generic_lstQuiosques.GetMapArray ( COMM_OUT_FETCH_REL_FECHCAIXA.lstQuiosques , ref lstQuiosques );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_dependente ( string st_empresa, string st_matricula, string st_dependente, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_INS_DEPENDENTE.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_INS_DEPENDENTE.st_matricula, st_matricula );
				send_dp.MapTagValue ( COMM_IN_INS_DEPENDENTE.st_dependente, st_dependente );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_DEPENDENTE.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_dependente );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_dirCont ( string st_empresa, string dt_ini, string dt_fim, ref CNetHeader header, ref string st_csv_contents, ref string st_nome_empresa, ref DadosSinteticoContGift dsc ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_DIRCONT.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_DIRCONT.dt_ini, dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_DIRCONT.dt_fim, dt_fim );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_DIRCONT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_dirCont );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_DIRCONT.st_csv_contents , ref st_csv_contents );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_DIRCONT.st_nome_empresa , ref st_nome_empresa );
				
				DataPortable recv_dp_cont_dsc = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (1).GetMapContainer ( COMM_OUT_FETCH_REL_DIRCONT.dsc , ref recv_dp_cont_dsc );
				
				dsc.Import ( recv_dp_cont_dsc );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_codLoja ( ref CNetHeader header, ref string st_cod ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CODLOJA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_codLoja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CODLOJA.st_cod , ref st_cod );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_reciboRepasse ( string id_repasse, ref CNetHeader header, ref DadosRepRecibo rec, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_RECIBOREPASSE.id_repasse, id_repasse );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_RECIBOREPASSE.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_reciboRepasse );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_cont_rec = new DataPortable();
				
				m_Client.m_RespComm.GetExitPortableAtPosition (0).GetMapContainer ( COMM_OUT_FETCH_RECIBOREPASSE.rec , ref recv_dp_cont_rec );
				
				rec.Import ( recv_dp_cont_rec );
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_RECIBOREPASSE.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_resolvePend ( string nsu, string dt_ini, string tg_confirmada, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_RESOLVEPEND.nsu, nsu );
				send_dp.MapTagValue ( COMM_IN_EXEC_RESOLVEPEND.dt_ini, dt_ini );
				send_dp.MapTagValue ( COMM_IN_EXEC_RESOLVEPEND.tg_confirmada, tg_confirmada );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_RESOLVEPEND.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_resolvePend );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_empresasAfiliadas ( string st_empresa, ref CNetHeader header, ref string st_nome_emp, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_EMPRESASAFILIADAS.st_empresa, st_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_EMPRESASAFILIADAS.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_empresasAfiliadas );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_EMPRESASAFILIADAS.st_nome_emp , ref st_nome_emp );
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (1);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_EMPRESASAFILIADAS.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pos_buscaCartao ( string st_empresa, string st_matricula, string st_terminal, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_POS_BUSCACARTAO.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_EXEC_POS_BUSCACARTAO.st_matricula, st_matricula );
				send_dp.MapTagValue ( COMM_IN_EXEC_POS_BUSCACARTAO.st_terminal, st_terminal );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pos_buscaCartao );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_EXEC_POS_BUSCACARTAO.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_fat_recManual ( string tg_empresa, string st_codigo, string vr_valor, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_FAT_RECMANUAL.tg_empresa, tg_empresa );
				send_dp.MapTagValue ( COMM_IN_EXEC_FAT_RECMANUAL.st_codigo, st_codigo );
				send_dp.MapTagValue ( COMM_IN_EXEC_FAT_RECMANUAL.vr_valor, vr_valor );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_FAT_RECMANUAL.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_fat_recManual );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_empresasGrafica ( ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_EMPRESASGRAFICA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_empresasGrafica );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_EMPRESASGRAFICA.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_bloq_loja ( string st_cnpj, string st_motivo, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_BLOQ_LOJA.st_cnpj, st_cnpj );
				send_dp.MapTagValue ( COMM_IN_EXEC_BLOQ_LOJA.st_motivo, st_motivo );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_BLOQ_LOJA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_bloq_loja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_desbloq_loja ( string st_cnpj, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_DESBLOQ_LOJA.st_cnpj, st_cnpj );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_DESBLOQ_LOJA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_desbloq_loja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_cancel_Loja ( string st_cnpj, string st_motivo, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_CANCEL_LOJA.st_cnpj, st_cnpj );
				send_dp.MapTagValue ( COMM_IN_EXEC_CANCEL_LOJA.st_motivo, st_motivo );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_CANCEL_LOJA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_cancel_Loja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool web_exec_confirmaBoleto ( string vr_fundoEdu, string vr_imediato, string st_cartao, ref string st_id ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_CONFIRMABOLETO.vr_fundoEdu, vr_fundoEdu );
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_CONFIRMABOLETO.vr_imediato, vr_imediato );
				send_dp.MapTagValue ( COMM_IN_WEB_EXEC_CONFIRMABOLETO.st_cartao, st_cartao );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.web_exec_confirmaBoleto );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_WEB_EXEC_CONFIRMABOLETO.st_id , ref st_id );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_user_lojista ( ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_USER_LOJISTA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_user_lojista );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_USER_LOJISTA.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_vincula_lojista ( string st_cod_loja, string id_usuario, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_VINCULA_LOJISTA.st_cod_loja, st_cod_loja );
				send_dp.MapTagValue ( COMM_IN_EXEC_VINCULA_LOJISTA.id_usuario, id_usuario );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_VINCULA_LOJISTA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_vincula_lojista );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_reciboVendaLojista ( string nsu_venda, ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_RECIBOVENDALOJISTA.nsu_venda, nsu_venda );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_RECIBOVENDALOJISTA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_reciboVendaLojista );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_RECIBOVENDALOJISTA.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_lojistaEmpresas ( string st_loja, ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_LOJISTAEMPRESAS.st_loja, st_loja );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_LOJISTAEMPRESAS.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_lojistaEmpresas );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_LOJISTAEMPRESAS.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_prevLojista ( string st_empresa, ref CNetHeader header, ref string st_csv ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_PREVLOJISTA.st_empresa, st_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_PREVLOJISTA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_prevLojista );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_PREVLOJISTA.st_csv , ref st_csv );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_tarifas ( ref CNetHeader header, ref string st_csv, ref string st_csv_emp ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_TARIFAS.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_tarifas );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_TARIFAS.st_csv , ref st_csv );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_TARIFAS.st_csv_emp , ref st_csv_emp );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool graph_financeiro ( string tg_tipo, ref CNetHeader header, ref ArrayList lstCurves, ref string st_content ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_GRAPH_FINANCEIRO.tg_tipo, tg_tipo );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_GRAPH_FINANCEIRO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				DataPortable send_dp_array_generic_lstCurves = new DataPortable();
				
				send_dp_array_generic_lstCurves.MapTagArray ( COMM_IN_GRAPH_FINANCEIRO.lstCurves, ref lstCurves ); 
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_array_generic_lstCurves );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.graph_financeiro );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_GRAPH_FINANCEIRO.st_content , ref st_content );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_listaTransacoesLojas ( string dt_ini, string dt_fim, ref CNetHeader header, ref string st_csv ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_LISTATRANSACOESLOJAS.dt_ini, dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_LISTATRANSACOESLOJAS.dt_fim, dt_fim );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_LISTATRANSACOESLOJAS.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_listaTransacoesLojas );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_LISTATRANSACOESLOJAS.st_csv , ref st_csv );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool graph_transacoes ( string dt_ini, string dt_fim, ref CNetHeader header, ref ArrayList lst, ref string st_csv ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_GRAPH_TRANSACOES.dt_ini, dt_ini );
				send_dp.MapTagValue ( COMM_IN_GRAPH_TRANSACOES.dt_fim, dt_fim );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_GRAPH_TRANSACOES.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				DataPortable send_dp_array_generic_lst = new DataPortable();
				
				send_dp_array_generic_lst.MapTagArray ( COMM_IN_GRAPH_TRANSACOES.lst, ref lst ); 
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_array_generic_lst );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.graph_transacoes );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_GRAPH_TRANSACOES.st_csv , ref st_csv );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_pf_graficoGerencial ( string tg_tipo, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_PF_GRAFICOGERENCIAL.tg_tipo, tg_tipo );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_pf_graficoGerencial );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_EXEC_PF_GRAFICOGERENCIAL.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_processaArqConvenio ( string st_id, string st_empresa, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_PROCESSAARQCONVENIO.st_id, st_id );
				send_dp.MapTagValue ( COMM_IN_EXEC_PROCESSAARQCONVENIO.st_empresa, st_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_PROCESSAARQCONVENIO.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_processaArqConvenio );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_consultaLojistaRep ( string cnpj, string pass, string mes, string ano, string empresa, ref string st_content ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_CONSULTALOJISTAREP.cnpj, cnpj );
				send_dp.MapTagValue ( COMM_IN_FETCH_CONSULTALOJISTAREP.pass, pass );
				send_dp.MapTagValue ( COMM_IN_FETCH_CONSULTALOJISTAREP.mes, mes );
				send_dp.MapTagValue ( COMM_IN_FETCH_CONSULTALOJISTAREP.ano, ano );
				send_dp.MapTagValue ( COMM_IN_FETCH_CONSULTALOJISTAREP.empresa, empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_consultaLojistaRep );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CONSULTALOJISTAREP.st_content , ref st_content );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_loginLojista ( string st_cnpj, string st_senha, ref string nome ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_LOGINLOJISTA.st_cnpj, st_cnpj );
				send_dp.MapTagValue ( COMM_IN_EXEC_LOGINLOJISTA.st_senha, st_senha );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_loginLojista );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_LOGINLOJISTA.nome , ref nome );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_listawebConveniosLoja ( string st_loja, string st_senha, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_LISTAWEBCONVENIOSLOJA.st_loja, st_loja );
				send_dp.MapTagValue ( COMM_IN_FETCH_LISTAWEBCONVENIOSLOJA.st_senha, st_senha );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_listawebConveniosLoja );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_LISTAWEBCONVENIOSLOJA.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_loginWeb ( string st_cartao, string st_senha, ref string nome ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_LOGINWEB.st_cartao, st_cartao );
				send_dp.MapTagValue ( COMM_IN_EXEC_LOGINWEB.st_senha, st_senha );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_loginWeb );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_EXEC_LOGINWEB.nome , ref nome );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_extratoWeb ( string st_cartao, string st_senha, ref string st_content, ref string vr_disp, ref string vr_lim ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_EXTRATOWEB.st_cartao, st_cartao );
				send_dp.MapTagValue ( COMM_IN_FETCH_EXTRATOWEB.st_senha, st_senha );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_extratoWeb );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_EXTRATOWEB.st_content , ref st_content );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_EXTRATOWEB.vr_disp , ref vr_disp );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_EXTRATOWEB.vr_lim , ref vr_lim );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_edu_messages ( ref CNetHeader header, ref string st_content ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_EDU_MESSAGES.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_edu_messages );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_EDU_MESSAGES.st_content , ref st_content );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool ins_edu_msg ( ref DadosEduMessage dem, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_INS_EDU_MSG.dem, dem as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_INS_EDU_MSG.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.ins_edu_msg );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool del_edu_msg ( string id_msg, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_DEL_EDU_MSG.id_msg, id_msg );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_DEL_EDU_MSG.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.del_edu_msg );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_change_edu_msg ( ref DadosEduMessage dem, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				DataPortable send_dp_cont_1 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_CHANGE_EDU_MSG.dem, dem as DataPortable );
				send_dp_cont_1.MapTagContainer ( COMM_IN_EXEC_CHANGE_EDU_MSG.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_1 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_change_edu_msg );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_residuo_gift ( string st_empresa, ref CNetHeader header, ref string st_block, ref string st_nome_empresa ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_RESIDUO_GIFT.st_empresa, st_empresa );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_RESIDUO_GIFT.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_residuo_gift );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_RESIDUO_GIFT.st_block , ref st_block );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_RESIDUO_GIFT.st_nome_empresa , ref st_nome_empresa );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_extratoWebFuturo ( string st_cartao, string st_senha, ref string st_content ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_EXTRATOWEBFUTURO.st_cartao, st_cartao );
				send_dp.MapTagValue ( COMM_IN_FETCH_EXTRATOWEBFUTURO.st_senha, st_senha );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_extratoWebFuturo );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_EXTRATOWEBFUTURO.st_content , ref st_content );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool exec_venda_pend_lojista ( string st_cartao, string vr_valor, ref CNetHeader header ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_EXEC_VENDA_PEND_LOJISTA.st_cartao, st_cartao );
				send_dp.MapTagValue ( COMM_IN_EXEC_VENDA_PEND_LOJISTA.vr_valor, vr_valor );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_EXEC_VENDA_PEND_LOJISTA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.exec_venda_pend_lojista );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_canc_dia_lojista ( ref CNetHeader header, ref string st_content ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_CANC_DIA_LOJISTA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_canc_dia_lojista );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_CANC_DIA_LOJISTA.st_content , ref st_content );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_financ_lojista ( string dt, ref CNetHeader header, ref string oper, ref string vendas, ref string canc ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_FINANC_LOJISTA.dt, dt );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_FINANC_LOJISTA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_financ_lojista );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_FINANC_LOJISTA.oper , ref oper );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_FINANC_LOJISTA.vendas , ref vendas );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_FINANC_LOJISTA.canc , ref canc );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_listaFiliais ( ref CNetHeader header, ref ArrayList lst ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_LISTAFILIAIS.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_listaFiliais );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp_array_generic_lst = m_Client.m_RespComm.GetExitPortableAtPosition (0);
				
				recv_dp_array_generic_lst.GetMapArray ( COMM_OUT_FETCH_LISTAFILIAIS.lst , ref lst );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_edu_movEscola ( string st_empresa, string st_dt_ini, string st_dt_fim, ref CNetHeader header, ref string st_content, ref string st_nome_escola ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_EDU_MOVESCOLA.st_empresa, st_empresa );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_EDU_MOVESCOLA.st_dt_ini, st_dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_EDU_MOVESCOLA.st_dt_fim, st_dt_fim );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_EDU_MOVESCOLA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_edu_movEscola );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_EDU_MOVESCOLA.st_content , ref st_content );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_EDU_MOVESCOLA.st_nome_escola , ref st_nome_escola );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
		public bool fetch_rel_edu_movRedeEscola ( string st_dt_ini, string st_dt_fim, ref CNetHeader header, ref string st_content, ref string st_empresa ) 
		{
			try
			{
				m_Client.ClearCommunication();
				
				DataPortable send_dp = new DataPortable();
				
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_EDU_MOVREDEESCOLA.st_dt_ini, st_dt_ini );
				send_dp.MapTagValue ( COMM_IN_FETCH_REL_EDU_MOVREDEESCOLA.st_dt_fim, st_dt_fim );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp );
				
				DataPortable send_dp_cont_0 = new DataPortable();
				
				send_dp_cont_0.MapTagContainer ( COMM_IN_FETCH_REL_EDU_MOVREDEESCOLA.header, header as DataPortable );
				
				m_Client.m_SendComm.AddEntryPortable ( ref send_dp_cont_0 );
				
				ArrayList objections = m_Client.ExecuteServerTransaction ( ServerTransactions.fetch_rel_edu_movRedeEscola );
				
				bool resp = m_Client.m_RespComm.m_TransactionSucessfull;
				
				DataPortable recv_dp = m_Client.m_RespComm.GetFirstExitPortable(); 
				
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_EDU_MOVREDEESCOLA.st_content , ref st_content );
				recv_dp.GetMapValue ( COMM_OUT_FETCH_REL_EDU_MOVREDEESCOLA.st_empresa , ref st_empresa );
				
				ShowObjections ( objections, m_Client.QuietMode );
				
				return resp;
			}
			catch ( System.Exception se )
			{
				if ( se.Message == "Exit" )
					Application.ExitThread();
				else if (!m_Client.QuietMode) 
					MessageBox.Show ( se.Message, "SYSTEM" );
			}
			
			return false;
		}
			
	}
}
