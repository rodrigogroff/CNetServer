// ###################################################### 
// ## SyCraf Engine Codegen                          #### 
// ###################################################### 
// ## This file is entirely written by               #### 
// ## the construction bot. DO NOT EDIT THIS FILE.   #### 
// ###################################################### 

using System;
using System.IO;
using System.Threading;
using System.Collections;

namespace SyCrafEngine
{
	public class I_Batch : Synchronization
	{
		private string i_unique = "0";
		private string st_archive = "";
		private string dt_start = "1900-01-01 00:00:00";
		private string dt_proc_start = "1900-01-01 00:00:00";
		private string dt_proc_end = "1900-01-01 00:00:00";
		private string tg_processed = "";
		private string tg_running = "";
		
		public int var_FieldCount = 7;
		
		public I_Batch ()
		{
			var_Serial = TB_I_BATCH.serial;
			var_Tablename = TB_I_BATCH.Alias;
		}
		
		public I_Batch ( Transaction trx )
		{
			AcquireTransaction ( ref trx );
			
			var_Serial = TB_I_BATCH.serial;
			var_Tablename = TB_I_BATCH.Alias;
			
			TraceLog ( var_Tablename + " serial : " + var_serialNumber);
		}
		
		public string exportNames()
		{
			return "st_archive,dt_start,dt_proc_start,dt_proc_end,tg_processed,tg_running";
		}
		
		public string exportCSV()
		{
			return i_unique + str_field_sep + st_archive + str_field_sep + dt_start + str_field_sep + dt_proc_start + str_field_sep + dt_proc_end + str_field_sep + tg_processed + str_field_sep + tg_running;
		}
		
		public void Reset()
		{
			i_unique = "0";
			st_archive = "";
			dt_start = "1900-01-01 00:00:00";
			dt_proc_start = "1900-01-01 00:00:00";
			dt_proc_end = "1900-01-01 00:00:00";
			tg_processed = "";
			tg_running = "";
		
			ReleaseExclusive();
		}
		
		public void copy ( ref I_Batch cpy )
		{
			st_archive = cpy.st_archive;
			dt_start = cpy.dt_start;
			dt_proc_start = cpy.dt_proc_start;
			dt_proc_end = cpy.dt_proc_end;
			tg_processed = cpy.tg_processed;
			tg_running = cpy.tg_running;
		}
		
		public override void fetchRetrieve ( ref DB_Row row )
		{
			i_unique = row.GetField ( TB_I_BATCH.i_unique );
			st_archive = row.GetField ( TB_I_BATCH.st_archive );
			dt_start = ConvertTime ( row.GetField ( TB_I_BATCH.dt_start ) );
			dt_proc_start = ConvertTime ( row.GetField ( TB_I_BATCH.dt_proc_start ) );
			dt_proc_end = ConvertTime ( row.GetField ( TB_I_BATCH.dt_proc_end ) );
			tg_processed = row.GetField ( TB_I_BATCH.tg_processed );
			tg_running = row.GetField ( TB_I_BATCH.tg_running );
		}
		
		public bool synchronize_I_Batch ( )
		{
			try{
			
			if ( m_hshChangedFields.Count == 0 )
				return true;
			
			StartUpdate();
		
			if ( m_hshChangedFields [ "st_archive" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_I_BATCH.st_archive , st_archive , TB_I_BATCH.type_st_archive );
			if ( m_hshChangedFields [ "dt_start" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_I_BATCH.dt_start , dt_start , TB_I_BATCH.type_dt_start );
			if ( m_hshChangedFields [ "dt_proc_start" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_I_BATCH.dt_proc_start , dt_proc_start , TB_I_BATCH.type_dt_proc_start );
			if ( m_hshChangedFields [ "dt_proc_end" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_I_BATCH.dt_proc_end , dt_proc_end , TB_I_BATCH.type_dt_proc_end );
			if ( m_hshChangedFields [ "tg_processed" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_I_BATCH.tg_processed , tg_processed , TB_I_BATCH.type_tg_processed );
			if ( m_hshChangedFields [ "tg_running" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_I_BATCH.tg_running , tg_running , TB_I_BATCH.type_tg_running );
		
			m_gen_dbStatement.AddWhere ( TB_I_BATCH.i_unique, i_unique, TB_I_BATCH.type_i_unique );
		
			} catch ( System.Exception ex ) {
				StreamWriter wr = new StreamWriter ( 	"CRITICAL_" + var_Tablename + "_" + "_" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Day.ToString().PadLeft ( 2, '0' ) + "_" + DateTime.Now.Hour.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Minute.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Second.ToString().PadLeft ( 2, '0' ) + ".txt" );
				wr.WriteLine ( ex.ToString() );
				wr.Flush();
				wr.Close();
			}
		
			return Update();
		}
			
		public string get_identity() { return i_unique; } 
		public string get_st_archive() { return st_archive; } 
		public string get_dt_start() { return dt_start; } 
		public string get_dt_proc_start() { return dt_proc_start; } 
		public string get_dt_proc_end() { return dt_proc_end; } 
		public string get_tg_processed() { return tg_processed; } 
		public string get_tg_running() { return tg_running; } 
			
		public void set_st_archive ( string val ) { st_archive = val; m_hshChangedFields [ "st_archive" ]="."; } 
		public void set_dt_start ( string val ) { dt_start = val; m_hshChangedFields [ "dt_start" ]="."; } 
		public void set_dt_proc_start ( string val ) { dt_proc_start = val; m_hshChangedFields [ "dt_proc_start" ]="."; } 
		public void set_dt_proc_end ( string val ) { dt_proc_end = val; m_hshChangedFields [ "dt_proc_end" ]="."; } 
		public void set_tg_processed ( string val ) { tg_processed = val; m_hshChangedFields [ "tg_processed" ]="."; } 
		public void set_tg_running ( string val ) { tg_running = val; m_hshChangedFields [ "tg_running" ]="."; } 
		
		public void fieldSelection()
		{
			m_gen_dbStatement.AddSelect ( TB_I_BATCH.i_unique );
			m_gen_dbStatement.AddSelect ( TB_I_BATCH.st_archive );
			m_gen_dbStatement.AddSelect ( TB_I_BATCH.dt_start );
			m_gen_dbStatement.AddSelect ( TB_I_BATCH.dt_proc_start );
			m_gen_dbStatement.AddSelect ( TB_I_BATCH.dt_proc_end );
			m_gen_dbStatement.AddSelect ( TB_I_BATCH.tg_processed );
			m_gen_dbStatement.AddSelect ( TB_I_BATCH.tg_running );
		}
			
		public bool selectAll()
		{
			do
			{
				StartSelect();
				fieldSelection();
				
				if ( !executeQuery() )
					return false;
			}
			while ( EndSelect() == false ); // row lock
			
			return  HasRows();
		}
		
		public bool selectIdentity ( string identity )
		{
			do
			{
				StartSelect();
				fieldSelection();
			
				m_gen_dbStatement.AddWhere ( TB_I_BATCH.i_unique, identity, TB_I_BATCH.type_i_unique );
			
				if ( !executeQuery())
					return false;
			}
			while ( EndSelect() == false ); // row lock
			
			if ( HasRows() == true)
			{
				DB_Row row = m_db_result.GetFirstRow();
				fetchRetrieve ( ref row );
				return true;
			}
			
			return false;
		}
		
		public bool create_I_Batch ( )
		{
			try{
			string new_id = "";
			
			StartInsert();
			
			m_gen_dbStatement.AddValue ( TB_I_BATCH.st_archive, st_archive, TB_I_BATCH.type_st_archive );
			m_gen_dbStatement.AddValue ( TB_I_BATCH.dt_start, dt_start, TB_I_BATCH.type_dt_start );
			m_gen_dbStatement.AddValue ( TB_I_BATCH.dt_proc_start, dt_proc_start, TB_I_BATCH.type_dt_proc_start );
			m_gen_dbStatement.AddValue ( TB_I_BATCH.dt_proc_end, dt_proc_end, TB_I_BATCH.type_dt_proc_end );
			m_gen_dbStatement.AddValue ( TB_I_BATCH.tg_processed, tg_processed, TB_I_BATCH.type_tg_processed );
			m_gen_dbStatement.AddValue ( TB_I_BATCH.tg_running, tg_running, TB_I_BATCH.type_tg_running );
			
			if ( !ExecuteScalar ( ref new_id ) )
				return false;
			
			i_unique = new_id;
			
			} catch ( System.Exception ex ) {
				StreamWriter wr = new StreamWriter ( 	"CRITICAL_" + var_Tablename + "_" + "_" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Day.ToString().PadLeft ( 2, '0' ) + "_" + DateTime.Now.Hour.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Minute.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Second.ToString().PadLeft ( 2, '0' ) + ".txt" );
				wr.WriteLine ( ex.ToString() );
				wr.Flush();
				wr.Close();
			}
			
			return true;
		}
			
		public bool delete ( )
		{
		
			bool ret = false;
		
			try{
			StartDelete();
			
			if ( i_unique != "0" )
				m_gen_dbStatement.AddWhere ( TB_I_BATCH.i_unique, i_unique, TB_I_BATCH.type_i_unique );
			
			ret = Execute();
			
			} catch ( System.Exception ex ) {
				StreamWriter wr = new StreamWriter ( 	"CRITICAL_" + var_Tablename + "_" + "_" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Day.ToString().PadLeft ( 2, '0' ) + "_" + DateTime.Now.Hour.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Minute.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Second.ToString().PadLeft ( 2, '0' ) + ".txt" );
				wr.WriteLine ( ex.ToString() );
				wr.Flush();
				wr.Close();
			}
			
			return ret; 
		}
			
		public bool select_rows_free ( string val_tg_processed, string val_tg_running )
		{
			do
			{
				StartSelect();
				fieldSelection();
			
				m_gen_dbStatement.AddWhere ( TB_I_BATCH.tg_processed, val_tg_processed , TB_I_BATCH.type_tg_processed);
				m_gen_dbStatement.AddWhere ( TB_I_BATCH.tg_running, val_tg_running , TB_I_BATCH.type_tg_running);
			
				if ( !executeQuery() )
					return false;
			}
			while ( EndSelect() == false ); // row lock
			
			return HasRows();
		}
			
		public bool select_rows_archive ( string val_st_archive )
		{
			do
			{
				StartSelect();
				fieldSelection();
			
				m_gen_dbStatement.AddWhere ( TB_I_BATCH.st_archive, val_st_archive , TB_I_BATCH.type_st_archive);
			
				if ( !executeQuery() )
					return false;
			}
			while ( EndSelect() == false ); // row lock
			
			return HasRows();
		}
		
		#if DEBUG
		
		public bool setup ( bool IsTruncate, ref string id, string var_st_archive, string var_dt_start, string var_dt_proc_start, string var_dt_proc_end, string var_tg_processed, string var_tg_running )
		{
			if ( IsTruncate ) 
			{
				i_unique = "";
				this.delete();
			}
		
			set_st_archive ( var_st_archive );
			set_dt_start ( var_dt_start );
			set_dt_proc_start ( var_dt_proc_start );
			set_dt_proc_end ( var_dt_proc_end );
			set_tg_processed ( var_tg_processed );
			set_tg_running ( var_tg_running );
			
			if ( create_I_Batch() == false )
			{
				return false;
			}
			
			id = get_identity();
			return true;
		}
		
		#endif
		
	}
}
