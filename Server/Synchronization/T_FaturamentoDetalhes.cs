// ###################################################### 
// ## SyCraf Engine Codegen                          #### 
// ###################################################### 
// ## This file is entirely written by               #### 
// ## the construction bot. DO NOT EDIT THIS FILE.   #### 
// ###################################################### 

using System;
using System.IO;
using System.Threading;
using System.Collections;

namespace SyCrafEngine
{
	public class T_FaturamentoDetalhes : Synchronization
	{
		private string i_unique = "0";
		private string fk_fatura = "0";
		private string tg_tipoFat = "0";
		private string nu_quantidade = "0";
		private string vr_cobranca = "0";
		private string tg_desconto = "";
		private string st_extras = "";
		private string fk_empresa = "0";
		private string fk_loja = "0";
		
		public int var_FieldCount = 9;
		
		public T_FaturamentoDetalhes ()
		{
			var_Serial = TB_T_FATURAMENTODETALHES.serial;
			var_Tablename = TB_T_FATURAMENTODETALHES.Alias;
		}
		
		public T_FaturamentoDetalhes ( Transaction trx )
		{
			AcquireTransaction ( ref trx );
			
			var_Serial = TB_T_FATURAMENTODETALHES.serial;
			var_Tablename = TB_T_FATURAMENTODETALHES.Alias;
			
			TraceLog ( var_Tablename + " serial : " + var_serialNumber);
		}
		
		public string exportNames()
		{
			return "fk_fatura,tg_tipoFat,nu_quantidade,vr_cobranca,tg_desconto,st_extras,fk_empresa,fk_loja";
		}
		
		public string exportCSV()
		{
			return i_unique + str_field_sep + fk_fatura + str_field_sep + tg_tipoFat + str_field_sep + nu_quantidade + str_field_sep + vr_cobranca + str_field_sep + tg_desconto + str_field_sep + st_extras + str_field_sep + fk_empresa + str_field_sep + fk_loja;
		}
		
		public void Reset()
		{
			i_unique = "0";
			fk_fatura = "0";
			tg_tipoFat = "0";
			nu_quantidade = "0";
			vr_cobranca = "0";
			tg_desconto = "";
			st_extras = "";
			fk_empresa = "0";
			fk_loja = "0";
		
			ReleaseExclusive();
		}
		
		public void copy ( ref T_FaturamentoDetalhes cpy )
		{
			fk_fatura = cpy.fk_fatura;
			tg_tipoFat = cpy.tg_tipoFat;
			nu_quantidade = cpy.nu_quantidade;
			vr_cobranca = cpy.vr_cobranca;
			tg_desconto = cpy.tg_desconto;
			st_extras = cpy.st_extras;
			fk_empresa = cpy.fk_empresa;
			fk_loja = cpy.fk_loja;
		}
		
		public override void fetchRetrieve ( ref DB_Row row )
		{
			i_unique = row.GetField ( TB_T_FATURAMENTODETALHES.i_unique );
			fk_fatura = row.GetField ( TB_T_FATURAMENTODETALHES.fk_fatura );
			tg_tipoFat = row.GetField ( TB_T_FATURAMENTODETALHES.tg_tipoFat );
			nu_quantidade = row.GetField ( TB_T_FATURAMENTODETALHES.nu_quantidade );
			vr_cobranca = row.GetField ( TB_T_FATURAMENTODETALHES.vr_cobranca );
			tg_desconto = row.GetField ( TB_T_FATURAMENTODETALHES.tg_desconto );
			st_extras = row.GetField ( TB_T_FATURAMENTODETALHES.st_extras );
			fk_empresa = row.GetField ( TB_T_FATURAMENTODETALHES.fk_empresa );
			fk_loja = row.GetField ( TB_T_FATURAMENTODETALHES.fk_loja );
		}
		
		public bool synchronize_T_FaturamentoDetalhes ( )
		{
			try{
			
			if ( m_hshChangedFields.Count == 0 )
				return true;
			
			StartUpdate();
		
			if ( m_hshChangedFields [ "fk_fatura" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_T_FATURAMENTODETALHES.fk_fatura , fk_fatura , TB_T_FATURAMENTODETALHES.type_fk_fatura );
			if ( m_hshChangedFields [ "tg_tipoFat" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_T_FATURAMENTODETALHES.tg_tipoFat , tg_tipoFat , TB_T_FATURAMENTODETALHES.type_tg_tipoFat );
			if ( m_hshChangedFields [ "nu_quantidade" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_T_FATURAMENTODETALHES.nu_quantidade , nu_quantidade , TB_T_FATURAMENTODETALHES.type_nu_quantidade );
			if ( m_hshChangedFields [ "vr_cobranca" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_T_FATURAMENTODETALHES.vr_cobranca , vr_cobranca , TB_T_FATURAMENTODETALHES.type_vr_cobranca );
			if ( m_hshChangedFields [ "tg_desconto" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_T_FATURAMENTODETALHES.tg_desconto , tg_desconto , TB_T_FATURAMENTODETALHES.type_tg_desconto );
			if ( m_hshChangedFields [ "st_extras" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_T_FATURAMENTODETALHES.st_extras , st_extras , TB_T_FATURAMENTODETALHES.type_st_extras );
			if ( m_hshChangedFields [ "fk_empresa" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_T_FATURAMENTODETALHES.fk_empresa , fk_empresa , TB_T_FATURAMENTODETALHES.type_fk_empresa );
			if ( m_hshChangedFields [ "fk_loja" ] != null )
				m_gen_dbStatement.AddUpdate ( TB_T_FATURAMENTODETALHES.fk_loja , fk_loja , TB_T_FATURAMENTODETALHES.type_fk_loja );
		
			m_gen_dbStatement.AddWhere ( TB_T_FATURAMENTODETALHES.i_unique, i_unique, TB_T_FATURAMENTODETALHES.type_i_unique );
		
			} catch ( System.Exception ex ) {
				StreamWriter wr = new StreamWriter ( 	"CRITICAL_" + var_Tablename + "_" + "_" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Day.ToString().PadLeft ( 2, '0' ) + "_" + DateTime.Now.Hour.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Minute.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Second.ToString().PadLeft ( 2, '0' ) + ".txt" );
				wr.WriteLine ( ex.ToString() );
				wr.Flush();
				wr.Close();
			}
		
			return Update();
		}
			
		public string get_identity() { return i_unique; } 
		public string get_fk_fatura() { return fk_fatura; } 
		public string get_tg_tipoFat() { return tg_tipoFat; } 
		public string get_nu_quantidade() { return nu_quantidade; } 
		public string get_vr_cobranca() { return vr_cobranca; } 
		public string get_tg_desconto() { return tg_desconto; } 
		public string get_st_extras() { return st_extras; } 
		public string get_fk_empresa() { return fk_empresa; } 
		public string get_fk_loja() { return fk_loja; } 
			
		public long get_int_fk_fatura() { return Convert.ToInt64 ( fk_fatura ); } 
		public long get_int_tg_tipoFat() { return Convert.ToInt64 ( tg_tipoFat ); } 
		public long get_int_nu_quantidade() { return Convert.ToInt64 ( nu_quantidade ); } 
		public long get_int_vr_cobranca() { return Convert.ToInt64 ( vr_cobranca ); } 
		public long get_int_fk_empresa() { return Convert.ToInt64 ( fk_empresa ); } 
		public long get_int_fk_loja() { return Convert.ToInt64 ( fk_loja ); } 
			
		public void set_fk_fatura ( string val ) { fk_fatura = val; m_hshChangedFields [ "fk_fatura" ]="."; } 
		public void set_tg_tipoFat ( string val ) { tg_tipoFat = val; m_hshChangedFields [ "tg_tipoFat" ]="."; } 
		public void set_nu_quantidade ( string val ) { nu_quantidade = val; m_hshChangedFields [ "nu_quantidade" ]="."; } 
		public void set_vr_cobranca ( string val ) { vr_cobranca = val; m_hshChangedFields [ "vr_cobranca" ]="."; } 
		public void set_tg_desconto ( string val ) { tg_desconto = val; m_hshChangedFields [ "tg_desconto" ]="."; } 
		public void set_st_extras ( string val ) { st_extras = val; m_hshChangedFields [ "st_extras" ]="."; } 
		public void set_fk_empresa ( string val ) { fk_empresa = val; m_hshChangedFields [ "fk_empresa" ]="."; } 
		public void set_fk_loja ( string val ) { fk_loja = val; m_hshChangedFields [ "fk_loja" ]="."; } 
		
		public void set_fk_fatura ( long val ) { fk_fatura = Convert.ToString(val); m_hshChangedFields [ "fk_fatura" ]="."; } 
		public void set_tg_tipoFat ( long val ) { tg_tipoFat = Convert.ToString(val); m_hshChangedFields [ "tg_tipoFat" ]="."; } 
		public void set_nu_quantidade ( long val ) { nu_quantidade = Convert.ToString(val); m_hshChangedFields [ "nu_quantidade" ]="."; } 
		public void set_vr_cobranca ( long val ) { vr_cobranca = Convert.ToString(val); m_hshChangedFields [ "vr_cobranca" ]="."; } 
		public void set_fk_empresa ( long val ) { fk_empresa = Convert.ToString(val); m_hshChangedFields [ "fk_empresa" ]="."; } 
		public void set_fk_loja ( long val ) { fk_loja = Convert.ToString(val); m_hshChangedFields [ "fk_loja" ]="."; } 
			
		public void fieldSelection()
		{
			m_gen_dbStatement.AddSelect ( TB_T_FATURAMENTODETALHES.i_unique );
			m_gen_dbStatement.AddSelect ( TB_T_FATURAMENTODETALHES.fk_fatura );
			m_gen_dbStatement.AddSelect ( TB_T_FATURAMENTODETALHES.tg_tipoFat );
			m_gen_dbStatement.AddSelect ( TB_T_FATURAMENTODETALHES.nu_quantidade );
			m_gen_dbStatement.AddSelect ( TB_T_FATURAMENTODETALHES.vr_cobranca );
			m_gen_dbStatement.AddSelect ( TB_T_FATURAMENTODETALHES.tg_desconto );
			m_gen_dbStatement.AddSelect ( TB_T_FATURAMENTODETALHES.st_extras );
			m_gen_dbStatement.AddSelect ( TB_T_FATURAMENTODETALHES.fk_empresa );
			m_gen_dbStatement.AddSelect ( TB_T_FATURAMENTODETALHES.fk_loja );
		}
			
		public bool selectAll()
		{
			do
			{
				StartSelect();
				fieldSelection();
				
				if ( !executeQuery() )
					return false;
			}
			while ( EndSelect() == false ); // row lock
			
			return  HasRows();
		}
		
		public bool selectIdentity ( string identity )
		{
			do
			{
				StartSelect();
				fieldSelection();
			
				m_gen_dbStatement.AddWhere ( TB_T_FATURAMENTODETALHES.i_unique, identity, TB_T_FATURAMENTODETALHES.type_i_unique );
			
				if ( !executeQuery())
					return false;
			}
			while ( EndSelect() == false ); // row lock
			
			if ( HasRows() == true)
			{
				DB_Row row = m_db_result.GetFirstRow();
				fetchRetrieve ( ref row );
				return true;
			}
			
			return false;
		}
		
		public bool create_T_FaturamentoDetalhes ( )
		{
			try{
			string new_id = "";
			
			StartInsert();
			
			m_gen_dbStatement.AddValue ( TB_T_FATURAMENTODETALHES.fk_fatura, fk_fatura, TB_T_FATURAMENTODETALHES.type_fk_fatura );
			m_gen_dbStatement.AddValue ( TB_T_FATURAMENTODETALHES.tg_tipoFat, tg_tipoFat, TB_T_FATURAMENTODETALHES.type_tg_tipoFat );
			m_gen_dbStatement.AddValue ( TB_T_FATURAMENTODETALHES.nu_quantidade, nu_quantidade, TB_T_FATURAMENTODETALHES.type_nu_quantidade );
			m_gen_dbStatement.AddValue ( TB_T_FATURAMENTODETALHES.vr_cobranca, vr_cobranca, TB_T_FATURAMENTODETALHES.type_vr_cobranca );
			m_gen_dbStatement.AddValue ( TB_T_FATURAMENTODETALHES.tg_desconto, tg_desconto, TB_T_FATURAMENTODETALHES.type_tg_desconto );
			m_gen_dbStatement.AddValue ( TB_T_FATURAMENTODETALHES.st_extras, st_extras, TB_T_FATURAMENTODETALHES.type_st_extras );
			m_gen_dbStatement.AddValue ( TB_T_FATURAMENTODETALHES.fk_empresa, fk_empresa, TB_T_FATURAMENTODETALHES.type_fk_empresa );
			m_gen_dbStatement.AddValue ( TB_T_FATURAMENTODETALHES.fk_loja, fk_loja, TB_T_FATURAMENTODETALHES.type_fk_loja );
			
			if ( !ExecuteScalar ( ref new_id ) )
				return false;
			
			i_unique = new_id;
			
			} catch ( System.Exception ex ) {
				StreamWriter wr = new StreamWriter ( 	"CRITICAL_" + var_Tablename + "_" + "_" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Day.ToString().PadLeft ( 2, '0' ) + "_" + DateTime.Now.Hour.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Minute.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Second.ToString().PadLeft ( 2, '0' ) + ".txt" );
				wr.WriteLine ( ex.ToString() );
				wr.Flush();
				wr.Close();
			}
			
			return true;
		}
			
		public bool delete ( )
		{
		
			bool ret = false;
		
			try{
			StartDelete();
			
			if ( i_unique != "0" )
				m_gen_dbStatement.AddWhere ( TB_T_FATURAMENTODETALHES.i_unique, i_unique, TB_T_FATURAMENTODETALHES.type_i_unique );
			
			ret = Execute();
			
			} catch ( System.Exception ex ) {
				StreamWriter wr = new StreamWriter ( 	"CRITICAL_" + var_Tablename + "_" + "_" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Day.ToString().PadLeft ( 2, '0' ) + "_" + DateTime.Now.Hour.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Minute.ToString().PadLeft ( 2, '0' ) + DateTime.Now.Second.ToString().PadLeft ( 2, '0' ) + ".txt" );
				wr.WriteLine ( ex.ToString() );
				wr.Flush();
				wr.Close();
			}
			
			return ret; 
		}
			
		public bool select_fk_fat ( string val_fk_fatura )
		{
			do
			{
				StartSelect();
				fieldSelection();
			
				m_gen_dbStatement.AddWhere ( TB_T_FATURAMENTODETALHES.fk_fatura, val_fk_fatura , TB_T_FATURAMENTODETALHES.type_fk_fatura);
			
				if ( !executeQuery() )
					return false;
			}
			while ( EndSelect() == false ); // row lock
			
			return HasRows();
		}
			
		public bool select_rows_emp ( string val_fk_empresa, string val_tg_tipoFat )
		{
			do
			{
				StartSelect();
				fieldSelection();
			
				m_gen_dbStatement.AddWhere ( TB_T_FATURAMENTODETALHES.fk_empresa, val_fk_empresa , TB_T_FATURAMENTODETALHES.type_fk_empresa);
				m_gen_dbStatement.AddWhere ( TB_T_FATURAMENTODETALHES.tg_tipoFat, val_tg_tipoFat , TB_T_FATURAMENTODETALHES.type_tg_tipoFat);
			
				if ( !executeQuery() )
					return false;
			}
			while ( EndSelect() == false ); // row lock
			
			return HasRows();
		}
			
		public bool select_rows_loja ( string val_fk_loja, string val_tg_tipoFat )
		{
			do
			{
				StartSelect();
				fieldSelection();
			
				m_gen_dbStatement.AddWhere ( TB_T_FATURAMENTODETALHES.fk_loja, val_fk_loja , TB_T_FATURAMENTODETALHES.type_fk_loja);
				m_gen_dbStatement.AddWhere ( TB_T_FATURAMENTODETALHES.tg_tipoFat, val_tg_tipoFat , TB_T_FATURAMENTODETALHES.type_tg_tipoFat);
			
				if ( !executeQuery() )
					return false;
			}
			while ( EndSelect() == false ); // row lock
			
			return HasRows();
		}
		
		#if DEBUG
		
		public bool setup ( bool IsTruncate, ref string id, string var_fk_fatura, string var_tg_tipoFat, string var_nu_quantidade, string var_vr_cobranca, string var_tg_desconto, string var_st_extras, string var_fk_empresa, string var_fk_loja )
		{
			if ( IsTruncate ) 
			{
				i_unique = "";
				this.delete();
			}
		
			set_fk_fatura ( var_fk_fatura );
			set_tg_tipoFat ( var_tg_tipoFat );
			set_nu_quantidade ( var_nu_quantidade );
			set_vr_cobranca ( var_vr_cobranca );
			set_tg_desconto ( var_tg_desconto );
			set_st_extras ( var_st_extras );
			set_fk_empresa ( var_fk_empresa );
			set_fk_loja ( var_fk_loja );
			
			if ( create_T_FaturamentoDetalhes() == false )
			{
				return false;
			}
			
			id = get_identity();
			return true;
		}
		
		#endif
		
	}
}
